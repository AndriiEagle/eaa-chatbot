/**
 * üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í EAA
 * 
 * –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ALL_Chapters_0-6.md
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ç–∏–ø–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
 */

const API_BASE = 'http://localhost:3000/api/v1';

// üîç –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê –¢–ï–†–ú–ò–ù–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
const EAA_TERMS_DATABASE = {
  // –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
  processes: [
    '–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', 'gap analysis', '–∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', 'conformity assessment',
    'market surveillance', '–¥–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', 'fundamental alteration',
    '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', 'presumption of conformity'
  ],
  
  // –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è
  legal: [
    'CE-–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞', '–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è', 'EU Declaration of Conformity',
    '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', 'harmonized standards', 'technical specifications',
    '—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', '–º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', '–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã'
  ],
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
  technical: [
    'WCAG', 'EAA', 'ARIA', 'API', 'DOM', 'ICT', 'ATM', 'PDF',
    'HTML', 'CSS', 'JSON', 'XML', 'HTTP', 'HTTPS'
  ],
  
  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
  specialized: [
    'assistive technologies', 'screen readers', 'text-to-speech',
    'real-time text', 'total conversation services', 'cochlear implants',
    'refreshable braille displays', 'voice control', 'eye tracking'
  ],
  
  // –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
  business: [
    'manufacturers', 'importers', 'distributors', 'service providers',
    'conformity procedures', 'market placement', 'product recall',
    'corrective measures', 'enforcement actions'
  ]
};

// üìã –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –ù–ê –û–°–ù–û–í–ï –î–û–ö–£–ú–ï–ù–¢–ê
const COMPREHENSIVE_TEST_SCENARIOS = [
  {
    category: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–†–ú–ò–ù–´',
    description: '–¢–µ—Å—Ç—ã —Ç–µ—Ä–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞—é—Ç –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ',
    tests: [
      {
        name: '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ - –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
        question: '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è EAA?',
        expectedTerms: ['–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', 'gap analysis'],
        expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ', 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã', 'üõ†Ô∏è –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'],
        context: '–°—Ç—Ä–æ–∫–∞ 335-336 –¥–æ–∫—É–º–µ–Ω—Ç–∞: Find gaps where your products or services don\'t meet the rules'
      },
      {
        name: '–î–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
        question: '–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¥–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ?',
        expectedTerms: ['–¥–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞', 'disproportionate burden'],
        expectedSuggestions: ['üîç –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç', 'üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏'],
        context: '–†–∞–∑–¥–µ–ª 3.7 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å'
      },
      {
        name: 'Fundamental alteration',
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ fundamental alteration –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ EAA?',
        expectedTerms: ['fundamental alteration', '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ'],
        expectedSuggestions: ['üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', 'üìã –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è'],
        context: '–†–∞–∑–¥–µ–ª 3.8 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç —ç—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—é'
      }
    ]
  },
  
  {
    category: '–ü–†–û–¶–ï–î–£–†–ù–´–ï –¢–ï–†–ú–ò–ù–´',
    description: '–¢–µ—Ä–º–∏–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
    tests: [
      {
        name: 'Conformity assessment',
        question: '–ö–∞–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã conformity assessment —Ç—Ä–µ–±—É–µ—Ç EAA?',
        expectedTerms: ['conformity assessment', '–æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è'],
        expectedSuggestions: ['üîç –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç', 'üìã –≠—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã'],
        context: '–†–∞–∑–¥–µ–ª 5.8 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ü–µ–Ω–∫–∏'
      },
      {
        name: 'Internal production control',
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ internal production control (Module A)?',
        expectedTerms: ['internal production control', 'Module A'],
        expectedSuggestions: ['üîç –û–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É', 'üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
        context: '–†–∞–∑–¥–µ–ª 5.8.2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç —ç—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É'
      },
      {
        name: 'Market surveillance',
        question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç market surveillance –¥–ª—è EAA –ø—Ä–æ–¥—É–∫—Ç–æ–≤?',
        expectedTerms: ['market surveillance', '–Ω–∞–¥–∑–æ—Ä –∑–∞ —Ä—ã–Ω–∫–æ–º'],
        expectedSuggestions: ['üîç –ß—Ç–æ —ç—Ç–æ', 'üõ†Ô∏è –ö–∞–∫ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è'],
        context: '–†–∞–∑–¥–µ–ª 6.3 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–¥–∑–æ—Ä –∑–∞ —Ä—ã–Ω–∫–æ–º'
      }
    ]
  },
  
  {
    category: '–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –°–¢–ê–ù–î–ê–†–¢–´',
    description: '–¢–µ—Ä–º–∏–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏',
    tests: [
      {
        name: 'Harmonized standards',
        question: '–ö–∞–∫–∏–µ harmonized standards –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–ª—è EAA?',
        expectedTerms: ['harmonized standards', '–≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã'],
        expectedSuggestions: ['üîç –ß—Ç–æ —ç—Ç–æ', 'üìã –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤'],
        context: '–†–∞–∑–¥–µ–ª 5.6 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç –≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã'
      },
      {
        name: 'WCAG compliance',
        question: '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å WCAG compliance –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤?',
        expectedTerms: ['WCAG', 'Web Content Accessibility Guidelines'],
        expectedSuggestions: ['üîç –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ WCAG', 'üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
        context: '–†–∞–∑–¥–µ–ª 2.1.1 –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã WCAG'
      },
      {
        name: 'Assistive technologies',
        question: '–ö–∞–∫–∏–µ assistive technologies –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã EAA?',
        expectedTerms: ['assistive technologies', '–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
        expectedSuggestions: ['üîç –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç', 'üìã –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π'],
        context: '–†–∞–∑–¥–µ–ª 2.6.2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É assistive technologies'
      }
    ]
  },
  
  {
    category: '–ë–ò–ó–ù–ï–°-–û–ë–Ø–ó–ê–¢–ï–õ–¨–°–¢–í–ê',
    description: '–¢–µ—Ä–º–∏–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –±–∏–∑–Ω–µ—Å–∞',
    tests: [
      {
        name: 'Economic operators',
        question: '–ö–∞–∫–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —É economic operators –ø–æ EAA?',
        expectedTerms: ['economic operators', '—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'],
        expectedSuggestions: ['üîç –ö—Ç–æ —ç—Ç–æ', 'üìã –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'],
        context: '–ì–ª–∞–≤–∞ 4 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
      },
      {
        name: 'Manufacturers obligations',
        question: '–ß—Ç–æ –¥–æ–ª–∂–Ω—ã –¥–µ–ª–∞—Ç—å manufacturers –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è EAA?',
        expectedTerms: ['manufacturers', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        expectedSuggestions: ['üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', 'üìã –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤'],
        context: '–†–∞–∑–¥–µ–ª 4.2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π'
      },
      {
        name: 'Service providers',
        question: '–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –∫ service providers?',
        expectedTerms: ['service providers', '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —É—Å–ª—É–≥'],
        expectedSuggestions: ['üîç –ö—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è', 'üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
        context: '–†–∞–∑–¥–µ–ª 4.5 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥'
      }
    ]
  },
  
  {
    category: '–°–õ–û–ñ–ù–´–ï –ö–û–ù–¶–ï–ü–¶–ò–ò',
    description: '–ú–Ω–æ–≥–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
    tests: [
      {
        name: 'Functional performance criteria',
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ functional performance criteria –≤ EAA?',
        expectedTerms: ['functional performance criteria', '–∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'],
        expectedSuggestions: ['üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', 'üìã –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤'],
        context: '–†–∞–∑–¥–µ–ª 2.9 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —ç—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏'
      },
      {
        name: 'Built environment accessibility',
        question: '–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –∫ built environment accessibility?',
        expectedTerms: ['built environment', '–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—ã'],
        expectedSuggestions: ['üîç –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç', 'üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
        context: '–†–∞–∑–¥–µ–ª 2.10 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ä–µ–¥–µ'
      },
      {
        name: 'Presumption of conformity',
        question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç presumption of conformity –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤?',
        expectedTerms: ['presumption of conformity', '–ø—Ä–µ–∑—É–º–ø—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è'],
        expectedSuggestions: ['üîç –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç', 'üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å'],
        context: '–†–∞–∑–¥–µ–ª 5.6.2 –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—ä—è—Å–Ω—è–µ—Ç —ç—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—é'
      }
    ]
  },
  
  {
    category: '–ö–û–ù–¢–†–û–õ–¨–ù–´–ï –¢–ï–°–¢–´',
    description: '–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π',
    tests: [
      {
        name: '–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        question: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        expectedTerms: [],
        expectedSuggestions: [],
        context: '–ù–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'
      },
      {
        name: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
        question: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!',
        expectedTerms: [],
        expectedSuggestions: [],
        context: '–ù–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å - –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'
      },
      {
        name: '–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç',
        question: '–î–∞, –ø–æ–Ω—è—Ç–Ω–æ.',
        expectedTerms: [],
        expectedSuggestions: [],
        context: '–ù–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å - –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç'
      }
    ]
  }
];

// üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê –î–û–ö–£–ú–ï–ù–¢–ê
const DOCUMENT_BASED_TESTS = [
  {
    name: '–¢–µ—Å—Ç —Ü–∏—Ç–∞—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
    question: '–û–±—ä—è—Å–Ω–∏ —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç "Find gaps where your products or services don\'t meet the rules"',
    expectedTerms: ['gaps', '–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤'],
    documentReference: '–°—Ç—Ä–æ–∫–∞ 335-336: * Find gaps where your products or services don\'t meet the rules.',
    expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏'
  },
  {
    name: '–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
    question: '–ö–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å conformity assessment procedure —Å–æ–≥–ª–∞—Å–Ω–æ Module A?',
    expectedTerms: ['conformity assessment', 'Module A', 'internal production control'],
    documentReference: '–†–∞–∑–¥–µ–ª 5.8.2 –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É Module A',
    expectedBehavior: '–î–æ–ª–∂–µ–Ω –≤—ã—è–≤–∏—Ç—å –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ'
  },
  {
    name: '–¢–µ—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤',
    question: '–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ EU Declaration of Conformity –∏ CE marking?',
    expectedTerms: ['EU Declaration of Conformity', 'CE marking', '–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è'],
    documentReference: '–†–∞–∑–¥–µ–ª—ã 5.4 –∏ 5.5 –æ–ø–∏—Å—ã–≤–∞—é—Ç —ç—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
    expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞'
  }
];

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 */
async function runComprehensiveTests() {
  console.log('üéØ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í EAA');
  console.log('='.repeat(80));
  console.log(`üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${COMPREHENSIVE_TEST_SCENARIOS.length}`);
  console.log(`üß™ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${COMPREHENSIVE_TEST_SCENARIOS.reduce((sum, cat) => sum + cat.tests.length, 0)}`);
  console.log(`üìã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${DOCUMENT_BASED_TESTS.length}`);
  console.log('='.repeat(80));

  const results = {
    totalTests: 0,
    passedTests: 0,
    failedTests: 0,
    categories: {},
    criticalIssues: [],
    recommendations: []
  };

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  for (const category of COMPREHENSIVE_TEST_SCENARIOS) {
    console.log(`\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: ${category.category}`);
    console.log(`üìù ${category.description}`);
    console.log('-'.repeat(60));

    const categoryResults = {
      total: category.tests.length,
      passed: 0,
      failed: 0,
      issues: []
    };

    for (const test of category.tests) {
      results.totalTests++;
      console.log(`\nüß™ –¢–ï–°–¢: ${test.name}`);
      console.log(`‚ùì –í–æ–ø—Ä–æ—Å: "${test.question}"`);
      console.log(`üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${test.context}`);

      try {
        const testResult = await runSingleTest(test);
        
        if (testResult.success) {
          results.passedTests++;
          categoryResults.passed++;
          console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù');
        } else {
          results.failedTests++;
          categoryResults.failed++;
          console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
          categoryResults.issues.push({
            test: test.name,
            issues: testResult.issues
          });
          
          if (testResult.critical) {
            results.criticalIssues.push({
              category: category.category,
              test: test.name,
              issue: testResult.issues[0]
            });
          }
        }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analyzeTestResult(test, testResult, results);

      } catch (error) {
        results.failedTests++;
        categoryResults.failed++;
        console.error(`üí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: ${error.message}`);
        categoryResults.issues.push({
          test: test.name,
          issues: [`–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`]
        });
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1500));
    }

    results.categories[category.category] = categoryResults;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–¢–ï–ì–û–†–ò–ò "${category.category}":`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${categoryResults.passed}/${categoryResults.total}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${categoryResults.failed}/${categoryResults.total}`);
    console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((categoryResults.passed / categoryResults.total) * 100)}%`);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  console.log('\nüìö –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ù–ê –û–°–ù–û–í–ï –î–û–ö–£–ú–ï–ù–¢–ê');
  console.log('='.repeat(60));

  for (const docTest of DOCUMENT_BASED_TESTS) {
    results.totalTests++;
    console.log(`\nüìñ –î–û–ö–£–ú–ï–ù–¢-–¢–ï–°–¢: ${docTest.name}`);
    console.log(`‚ùì –í–æ–ø—Ä–æ—Å: "${docTest.question}"`);
    console.log(`üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: ${docTest.documentReference}`);

    try {
      const testResult = await runDocumentBasedTest(docTest);
      
      if (testResult.success) {
        results.passedTests++;
        console.log('‚úÖ –î–û–ö–£–ú–ï–ù–¢-–¢–ï–°–¢ –ü–†–û–ô–î–ï–ù');
      } else {
        results.failedTests++;
        console.log('‚ùå –î–û–ö–£–ú–ï–ù–¢-–¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
        console.log(`üîç –ü—Ä–æ–±–ª–µ–º—ã: ${testResult.issues.join(', ')}`);
      }
    } catch (error) {
      results.failedTests++;
      console.error(`üí• –û–®–ò–ë–ö–ê –í –î–û–ö–£–ú–ï–ù–¢-–¢–ï–°–¢–ï: ${error.message}`);
    }

    await new Promise(resolve => setTimeout(resolve, 1500));
  }

  // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
  generateFinalReport(results);
}

/**
 * üî¨ –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–î–ù–û–ì–û –¢–ï–°–¢–ê
 */
async function runSingleTest(test) {
  const response = await fetch(`${API_BASE}/ask`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      question: test.question,
      user_id: 'test_comprehensive',
      session_id: `test_${Date.now()}`
    })
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  const data = await response.json();
  const issues = [];
  let success = true;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  const foundTerms = data.detectedTerms || [];
  const foundTermNames = foundTerms.map(t => t.term.toLowerCase());
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (${foundTerms.length}): ${foundTermNames.join(', ')}`);

  for (const expectedTerm of test.expectedTerms) {
    const found = foundTermNames.some(term => 
      term.includes(expectedTerm.toLowerCase()) || 
      expectedTerm.toLowerCase().includes(term)
    );
    
    if (!found) {
      issues.push(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ—Ä–º–∏–Ω: "${expectedTerm}"`);
      success = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const suggestions = data.clarificationQuestions || [];
  console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ (${suggestions.length}): ${suggestions.slice(0, 3).join(' | ')}`);

  for (const expectedSuggestion of test.expectedSuggestions) {
    const found = suggestions.some(suggestion => 
      suggestion.toLowerCase().includes(expectedSuggestion.toLowerCase())
    );
    
    if (!found) {
      issues.push(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞: "${expectedSuggestion}"`);
      success = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
  const answerLength = data.answer?.length || 0;
  if (answerLength < 100) {
    issues.push('–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
    success = false;
  }

  return {
    success,
    issues,
    critical: test.expectedTerms.length > 0 && foundTerms.length === 0,
    data
  };
}

/**
 * üìñ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–ê –ù–ê –û–°–ù–û–í–ï –î–û–ö–£–ú–ï–ù–¢–ê
 */
async function runDocumentBasedTest(docTest) {
  const response = await fetch(`${API_BASE}/ask`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      question: docTest.question,
      user_id: 'test_document_based',
      session_id: `doc_test_${Date.now()}`
    })
  });

  const data = await response.json();
  const issues = [];
  let success = true;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
  const foundTerms = (data.detectedTerms || []).map(t => t.term.toLowerCase());
  
  for (const expectedTerm of docTest.expectedTerms) {
    const found = foundTerms.some(term => 
      term.includes(expectedTerm.toLowerCase()) || 
      expectedTerm.toLowerCase().includes(term)
    );
    
    if (!found) {
      issues.push(`–î–æ–∫—É–º–µ–Ω—Ç-—Ç–µ—Å—Ç: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω "${expectedTerm}"`);
      success = false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const answer = data.answer?.toLowerCase() || '';
  const hasRelevantContent = docTest.expectedTerms.some(term => 
    answer.includes(term.toLowerCase())
  );

  if (!hasRelevantContent) {
    issues.push('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    success = false;
  }

  return { success, issues, data };
}

/**
 * üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê –¢–ï–°–¢–ê
 */
function analyzeTestResult(test, result, globalResults) {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
  if (test.expectedTerms.length > 0) {
    const detectionRate = (result.data.detectedTerms?.length || 0) / test.expectedTerms.length;
    
    if (detectionRate < 0.5) {
      globalResults.recommendations.push({
        type: 'term_detection',
        message: `–ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ —Ç–µ—Å—Ç–µ "${test.name}" (${Math.round(detectionRate * 100)}%)`,
        suggestion: '–£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤'
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  const suggestions = result.data.clarificationQuestions || [];
  const contextualSuggestions = suggestions.filter(s => 
    s.includes('üîç') || s.includes('üìã') || s.includes('üõ†Ô∏è')
  );

  if (test.expectedTerms.length > 0 && contextualSuggestions.length === 0) {
    globalResults.recommendations.push({
      type: 'suggestion_quality',
      message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —Ç–µ—Å—Ç–µ "${test.name}"`,
      suggestion: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤'
    });
  }
}

/**
 * üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê
 */
function generateFinalReport(results) {
  console.log('\n' + '='.repeat(80));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(80));

  const successRate = Math.round((results.passedTests / results.totalTests) * 100);
  
  console.log(`\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${results.passedTests}/${results.totalTests})`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.passedTests}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.failedTests}`);

  console.log(`\nüìÇ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:`);
  for (const [category, categoryResult] of Object.entries(results.categories)) {
    const categoryRate = Math.round((categoryResult.passed / categoryResult.total) * 100);
    console.log(`   ${category}: ${categoryRate}% (${categoryResult.passed}/${categoryResult.total})`);
    
    if (categoryResult.issues.length > 0) {
      console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã: ${categoryResult.issues.length}`);
    }
  }

  if (results.criticalIssues.length > 0) {
    console.log(`\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${results.criticalIssues.length}):`);
    results.criticalIssues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue.category} - ${issue.test}: ${issue.issue}`);
    });
  }

  if (results.recommendations.length > 0) {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ (${results.recommendations.length}):`);
    results.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. [${rec.type}] ${rec.message}`);
      console.log(`      üí° ${rec.suggestion}`);
    });
  }

  console.log(`\nüéØ –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:`);
  if (successRate >= 90) {
    console.log('üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
  } else if (successRate >= 75) {
    console.log('üü° –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, —Ç—Ä–µ–±—É—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  } else if (successRate >= 60) {
    console.log('üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –¢—Ä–µ–±—É—é—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è');
  } else {
    console.log('üî¥ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }

  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80));
}

// üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
if (require.main === module) {
  runComprehensiveTests()
    .then(() => {
      console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    });
}

module.exports = {
  runComprehensiveTests,
  EAA_TERMS_DATABASE,
  COMPREHENSIVE_TEST_SCENARIOS,
  DOCUMENT_BASED_TESTS
}; 