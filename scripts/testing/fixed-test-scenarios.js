/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç –û–î–ò–ù —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Å–æ–æ–±—â–µ–Ω–∏–π
 */

const http = require('http');
const { v4: uuidv4 } = require('uuid');
const API_BASE = 'http://localhost:3000/api/v1';

class FrustrationTestSuite {
  constructor() {
    this.userId = `test-user-${Date.now()}`;
    this.sessionId = uuidv4();
    this.messageCount = 0;
  }

  async sendMessage(message, description) {
    this.messageCount++;
    
    console.log(`\nüìù [TEST ${this.messageCount}] ${description}`);
    console.log(`üë§ User: ${this.userId}`);
    console.log(`üí¨ Session: ${this.sessionId}`);
    console.log(`‚ùì Message: "${message}"`);
    
    try {
      const postData = JSON.stringify({
        user_id: this.userId,
        session_id: this.sessionId,
        question: message,
        stream: false
      });

      const options = {
        hostname: 'localhost',
        port: 3000,
        path: '/api/v1/ask',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(postData)
        }
      };

      const response = await new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
          let data = '';
          res.on('data', (chunk) => {
            data += chunk;
          });
          res.on('end', () => {
            console.log(`‚úÖ [TEST ${this.messageCount}] Response received`);
            console.log(`üìä Status: ${res.statusCode}`);
            
            if (res.statusCode >= 200 && res.statusCode < 300) {
              try {
                const jsonData = JSON.parse(data);
                resolve(jsonData);
              } catch (parseError) {
                console.error(`‚ùå [TEST ${this.messageCount}] JSON Parse Error:`, parseError.message);
                resolve({ error: 'JSON Parse Error' });
              }
            } else {
              console.error(`‚ùå [TEST ${this.messageCount}] HTTP Error: ${res.statusCode}`);
              resolve({ error: `HTTP ${res.statusCode}` });
            }
          });
        });

        req.on('error', (err) => {
          console.error(`‚ùå [TEST ${this.messageCount}] Request Error:`, err.message);
          reject(err);
        });

        req.write(postData);
        req.end();
      });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      return response;
      
    } catch (error) {
      console.error(`‚ùå [TEST ${this.messageCount}] Error:`, error.message);
      throw error;
    }
  }

  async runGradualFrustrationScenario() {
    console.log(`\nüé≠ –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–Ø: –ì–†–ê–î–£–ê–õ–¨–ù–ê–Ø –§–†–£–°–¢–†–ê–¶–ò–Ø`);
    console.log(`================================================`);
    
    try {
      // –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
      await this.sendMessage(
        "–ß—Ç–æ —Ç–∞–∫–æ–µ European Accessibility Act?",
        "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
      );
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ 2: –õ—ë–≥–∫–æ–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ
      await this.sendMessage(
        "–í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π, –æ–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–æ—â–µ",
        "–õ–µ–≥–∫–æ–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ –∫–∞—á–µ—Å—Ç–≤–æ–º –æ—Ç–≤–µ—Ç–∞"
      );
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ 3: –£—Å–∏–ª–µ–Ω–∏–µ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏
      await this.sendMessage(
        "–û–ø—è—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ! –ú–Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!",
        "–£—Å–∏–ª–µ–Ω–∏–µ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è–º–∏"
      );
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ 4: –í—ã—Å–æ–∫–∞—è —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
      await this.sendMessage(
        "Damn it! –ü–æ—á–µ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç?!",
        "–í—ã—Å–æ–∫–∞—è —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏"
      );
      
      // –°–æ–æ–±—â–µ–Ω–∏–µ 5: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
      await this.sendMessage(
        "FUCK THIS! –Ø —Ç—Ä–∞—á—É –≤—Ä–µ–º—è –≤–ø—É—Å—Ç—É—é! –í–∞—à –±–æ—Ç –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω!",
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è - –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏—è"
      );
      
      console.log(`\n‚úÖ [SCENARIO] –°—Ü–µ–Ω–∞—Ä–∏–π –≥—Ä–∞–¥—É–∞–ª—å–Ω–æ–π —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${this.messageCount}`);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${this.userId}`);
      console.log(`üí¨ –°–µ—Å—Å–∏—è: ${this.sessionId}`);
      
    } catch (error) {
      console.error(`‚ùå [SCENARIO] –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:`, error);
    }
  }

  async runDenialScenario() {
    console.log(`\nüé≠ –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–Ø: –û–¢–†–ò–¶–ê–ù–ò–ï –ò –ü–†–û–¢–ï–°–¢`);
    console.log(`================================================`);
    
    try {
      await this.sendMessage("–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?", "–ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å");
      await this.sendMessage("–ù–µ—Ç, —ç—Ç–æ –Ω–µ —Ç–æ!", "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞");
      await this.sendMessage("NO! –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", "–£—Å–∏–ª–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è");
      await this.sendMessage("NO NO NO! –í—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ!", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ");
      await this.sendMessage("no!!!!!!!!!!!!!!!!!!!!", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ");
      
      console.log(`\n‚úÖ [SCENARIO] –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω`);
      
    } catch (error) {
      console.error(`‚ùå [SCENARIO] –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è:`, error);
    }
  }

  async runProfanityEscalationScenario() {
    console.log(`\nüé≠ –ó–ê–ü–£–°–ö –°–¶–ï–ù–ê–†–ò–Ø: –≠–°–ö–ê–õ–ê–¶–ò–Ø –° –†–£–ì–ê–¢–ï–õ–¨–°–¢–í–ê–ú–ò`);
    console.log(`================================================`);
    
    try {
      await this.sendMessage("–ü–æ–º–æ–≥–∏—Ç–µ —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞");
      await this.sendMessage("–í–∞—à –æ—Ç–≤–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω!", "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞");
      await this.sendMessage("Damn it! –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", "–ü–µ—Ä–≤–æ–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ");
      await this.sendMessage("Shit! –ü–æ—á–µ–º—É —Ç–∞–∫ –ø–ª–æ—Ö–æ?!", "–£—Å–∏–ª–µ–Ω–∏–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤");
      await this.sendMessage("Fuck this! –Ø –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç!", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ");
      
      console.log(`\n‚úÖ [SCENARIO] –°—Ü–µ–Ω–∞—Ä–∏–π —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      
    } catch (error) {
      console.error(`‚ùå [SCENARIO] –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏:`, error);
    }
  }

  async validateSessionContinuity() {
    console.log(`\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï–ü–†–ï–†–´–í–ù–û–°–¢–ò –°–ï–°–°–ò–ò`);
    console.log(`================================================`);
    
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω–∏ –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const messages = [
      "–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
      "–í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
      "–¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    ];
    
    for (let i = 0; i < messages.length; i++) {
      await this.sendMessage(messages[i], `–¢–µ—Å—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏ ${i + 1}/3`);
    }
    
    console.log(`\n‚úÖ [VALIDATION] –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–µ—Å—Å–∏–∏: ${this.sessionId}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log(`üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –¢–ï–°–¢–û–í–´–• –°–¶–ï–ù–ê–†–ò–ï–í`);
  console.log(`================================================`);
  console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toISOString()}`);
  
  try {
    // –¢–µ—Å—Ç 1: –ì—Ä–∞–¥—É–∞–ª—å–Ω–∞—è —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
    const test1 = new FrustrationTestSuite();
    await test1.runGradualFrustrationScenario();
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –¢–µ—Å—Ç 2: –û—Ç—Ä–∏—Ü–∞–Ω–∏–µ
    const test2 = new FrustrationTestSuite();
    await test2.runDenialScenario();
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // –¢–µ—Å—Ç 3: –≠—Å–∫–∞–ª–∞—Ü–∏—è —Å —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
    const test3 = new FrustrationTestSuite();
    await test3.runProfanityEscalationScenario();
    
    // –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    const test4 = new FrustrationTestSuite();
    await test4.validateSessionContinuity();
    
    console.log(`\nüéâ –í–°–ï –¢–ï–°–¢–û–í–´–ï –°–¶–ï–ù–ê–†–ò–ò –ó–ê–í–ï–†–®–ï–ù–´`);
    console.log(`================================================`);
    console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toISOString()}`);
    
  } catch (error) {
    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:`, error);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runAllTests();
}

module.exports = { FrustrationTestSuite, runAllTests }; 