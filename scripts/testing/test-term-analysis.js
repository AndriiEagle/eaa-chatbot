/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ –ò–ò-–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å EAA —Ç–µ—Ä–º–∏–Ω–∞–º–∏
 */

const testTermAnalysis = async () => {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í');
  console.log('=====================================\n');

  const API_BASE = 'http://localhost:3000/api/v1';
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å EAA —Ç–µ—Ä–º–∏–Ω–∞–º–∏
  const testCases = [
    {
      name: '–¢–µ—Å—Ç "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" - –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
      question: '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –º–æ–µ–≥–æ —Å–∞–π—Ç–∞?',
      expectedTerms: ['–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', '–∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏', 'compliance']
    },
    {
      name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã',
      question: '–ù—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å CE-–º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –∏ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –º–æ–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞?',
      expectedTerms: ['CE-–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞', '–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è']
    },
    {
      name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã',
      question: '–ú–æ–π —Å–∞–π—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å WCAG 2.1 –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å ARIA-–∞—Ç—Ä–∏–±—É—Ç—ã?',
      expectedTerms: ['WCAG', 'ARIA']
    },
    {
      name: '–ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å - –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å',
      question: '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
      expectedTerms: []
    }
  ];

  console.log(`üìã –ó–∞–ø—É—â–µ–Ω–æ ${testCases.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:\n`);

  for (let i = 0; i < testCases.length; i++) {
    const testCase = testCases[i];
    
    console.log(`üß™ –¢–ï–°–¢ ${i + 1}: ${testCase.name}`);
    console.log(`‚ùì –í–æ–ø—Ä–æ—Å: "${testCase.question}"`);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
      const response = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          question: testCase.question,
          user_id: 'test_user_term_analysis',
          session_id: `test_session_${i + 1}`
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP Error: ${response.status}`);
      }

      const data = await response.json();
      
      console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (${data.answer?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      if (data.detectedTerms && data.detectedTerms.length > 0) {
        console.log(`üîç –ù–ê–ô–î–ï–ù–ù–´–ï –¢–ï–†–ú–ò–ù–´ (${data.detectedTerms.length}):`);
        data.detectedTerms.forEach(term => {
          console.log(`   ‚Ä¢ "${term.term}" (${term.category}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${term.confidence})`);
        });
      } else {
        console.log('üîç –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
      if (data.clarificationQuestions && data.clarificationQuestions.length > 0) {
        console.log(`üí° –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ü–û–î–°–ö–ê–ó–ö–ò (${data.clarificationQuestions.length}):`);
        data.clarificationQuestions.forEach((suggestion, idx) => {
          if (suggestion.includes('üîç') || suggestion.includes('üìã') || suggestion.includes('üõ†Ô∏è')) {
            console.log(`   ${idx + 1}. ${suggestion} [–¢–ï–†–ú–ò–ù]`);
          } else {
            console.log(`   ${idx + 1}. ${suggestion}`);
          }
        });
      }
      
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${data.performance?.total_ms || 'N/A'}ms`);
      
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ ${i + 1}:`, error.message);
    }
    
    console.log('‚îÄ'.repeat(50));
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    if (i < testCases.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  console.log('\nüéØ –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –û–ë–™–Ø–°–ù–ï–ù–ò–Ø –¢–ï–†–ú–ò–ù–ê:');
  console.log('===================================');
  
  try {
    const termResponse = await fetch(`${API_BASE}/explain-term`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },  
      body: JSON.stringify({
        term: '–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
        context: '–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ EAA',
        user_id: 'test_user_explain'
      })
    });

    if (termResponse.ok) {
      const termData = await termResponse.json();
      console.log(`‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ "${termData.term}":`);
      console.log(`üìù ${termData.explanation}`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è: ${termData.performance.response_time_ms}ms`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞: ${termResponse.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä—è–º–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:', error.message);
  }

  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('========================');
  console.log('üí° –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —ç–º–æ–¥–∑–∏ üîçüìãüõ†Ô∏è,');
  console.log('   —Ç–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ—Ä–º–∏–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û!');
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–±–ª–µ–º–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –†–ï–®–ï–ù–ê.');
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testTermAnalysis()
  .then(() => {
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }); 