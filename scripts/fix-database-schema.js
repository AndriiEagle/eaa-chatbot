#!/usr/bin/env node

/**
 * üö® –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–î
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–æ–π user_id 
 * –≤ —Ç–∞–±–ª–∏—Ü–µ frustration_analysis
 */

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üö® –ù–ê–ß–ò–ù–ê–ï–ú –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–•–ï–ú–´ –ë–î...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY');
  console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function fixDatabase() {
  try {
    console.log('üìù –ß–∏—Ç–∞–µ–º SQL-—Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
    
    // –ß–∏—Ç–∞–µ–º SQL-—Å–∫—Ä–∏–ø—Ç
    const sqlPath = join(__dirname, '..', 'sql', 'fix_frustration_analysis_table.sql');
    const sqlScript = readFileSync(sqlPath, 'utf8');
    
    console.log('üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-—Å–∫—Ä–∏–ø—Ç
    const { data, error } = await supabase.rpc('exec_sql', {
      sql_script: sqlScript
    });
    
    if (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL:', error);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ query
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
      
      const commands = [
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É user_id –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        `DO $$ 
         BEGIN 
           IF NOT EXISTS (
             SELECT 1 FROM information_schema.columns 
             WHERE table_name = 'frustration_analysis' AND column_name = 'user_id'
           ) THEN
             ALTER TABLE frustration_analysis ADD COLUMN user_id TEXT;
             RAISE NOTICE '–ö–æ–ª–æ–Ω–∫–∞ user_id –¥–æ–±–∞–≤–ª–µ–Ω–∞';
           END IF;
         END $$;`,
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        `CREATE INDEX IF NOT EXISTS idx_frustration_analysis_user_id ON frustration_analysis(user_id);`
      ];
      
      for (const command of commands) {
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º: ${command.substring(0, 50)}...`);
        const { error: cmdError } = await supabase.query(command);
        if (cmdError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ: ${cmdError.message}`);
        } else {
          console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        }
      }
    } else {
      console.log('‚úÖ SQL-—Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', data);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    
    const { data: columns, error: columnError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'frustration_analysis')
      .order('ordinal_position');
    
    if (columnError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', columnError);
    } else {
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã frustration_analysis:');
      console.table(columns);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ user_id
      const hasUserId = columns.some(col => col.column_name === 'user_id');
      
      if (hasUserId) {
        console.log('\nüéâ –£–°–ü–ï–•! –ö–æ–ª–æ–Ω–∫–∞ user_id –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ!');
        console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å.');
      } else {
        console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–æ–ª–æ–Ω–∫–∞ user_id –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        console.log('üîß –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard');
      }
    }
    
  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
    console.log('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:');
    console.log('   ALTER TABLE frustration_analysis ADD COLUMN user_id TEXT;');
    console.log('4. –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å:');
    console.log('   CREATE INDEX idx_frustration_analysis_user_id ON frustration_analysis(user_id);');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixDatabase()
  .then(() => {
    console.log('\nüèÅ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üîÑ –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞: npm test');
  })
  .catch((error) => {
    console.error('üí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê:', error);
    process.exit(1);
  }); 