/**
 * üë• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í
 * 
 * –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ—Ç–æ–º EAA
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –æ European Accessibility Act
 */

const API_BASE = 'http://localhost:3000/api/v1';

// üë§ –†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–¶–ï–ù–ê–†–ò–ò
const REAL_USER_SCENARIOS = [
  {
    persona: '–ù–û–í–ò–ß–û–ö –í EAA',
    description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ —Å–ª—ã—à–∏—Ç –æ EAA –∏ –Ω–µ –∑–Ω–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏',
    scenarios: [
      {
        name: '–ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å EAA',
        conversation: [
          {
            user: '–ß—Ç–æ —Ç–∞–∫–æ–µ European Accessibility Act?',
            expectedTerms: ['European Accessibility Act', 'EAA'],
            expectedSuggestions: ['üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ EAA', 'üìã –ö–æ–≥–æ –∫–∞—Å–∞–µ—Ç—Å—è', 'üõ†Ô∏è –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å']
          },
          {
            user: '–ê —á—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?',
            expectedTerms: ['–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', 'gap analysis'],
            expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', 'üìã –ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏', 'üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'],
            context: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–Ω—è–ª —Ç–µ—Ä–º–∏–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞'
          },
          {
            user: '–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤',
            expectedTerms: ['–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤'],
            expectedSuggestions: ['üìã –ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω', 'üõ†Ô∏è –ß–µ–∫-–ª–∏—Å—Ç', 'üìä –®–∞–±–ª–æ–Ω—ã']
          }
        ]
      },
      {
        name: '–ü—É—Ç–∞–Ω–∏—Ü–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏',
        conversation: [
          {
            user: '–ú–Ω–µ –Ω—É–∂–Ω–∞ CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∞–π—Ç–∞?',
            expectedTerms: ['CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞'],
            expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞', 'üìã –î–ª—è –∫–∞–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '‚ùå –ù–µ –¥–ª—è —Å–∞–π—Ç–æ–≤'],
            context: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—É—Ç–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É—Å–ª—É–≥–∏'
          },
          {
            user: '–ê —á—Ç–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞?',
            expectedTerms: ['service providers', '–≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'],
            expectedSuggestions: ['üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∞–π—Ç–∞–º', 'üõ†Ô∏è WCAG —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã', 'üìä –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å']
          }
        ]
      }
    ]
  },

  {
    persona: '–†–ê–ó–†–ê–ë–û–¢–ß–ò–ö',
    description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∑–Ω–∞–∫–æ–º—ã–π —Å –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π',
    scenarios: [
      {
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
        conversation: [
          {
            user: '–ö–∞–∫–∏–µ WCAG —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è EAA?',
            expectedTerms: ['WCAG', 'Web Content Accessibility Guidelines'],
            expectedSuggestions: ['üîç WCAG 2.1 —É—Ä–æ–≤–Ω–∏', 'üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞', 'üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è']
          },
          {
            user: '–ß—Ç–æ —Ç–∞–∫–æ–µ assistive technologies –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?',
            expectedTerms: ['assistive technologies', 'screen readers'],
            expectedSuggestions: ['üîç –¢–∏–ø—ã AT', 'üìã –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –∫–æ–¥–µ', 'üõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å AT']
          },
          {
            user: '–ö–∞–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å screen readers?',
            expectedTerms: ['screen readers', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏'],
            expectedSuggestions: ['üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'üìã –ß–µ–∫-–ª–∏—Å—Ç', 'üîç –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ screen readers']
          }
        ]
      }
    ]
  },

  {
    persona: '–ë–ò–ó–ù–ï–°-–í–õ–ê–î–ï–õ–ï–¶',
    description: '–í–ª–∞–¥–µ–ª–µ—Ü –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–Ω—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º',
    scenarios: [
      {
        name: '–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
        conversation: [
          {
            user: '–ú–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å EAA?',
            expectedTerms: ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', 'e-commerce', 'service providers'],
            expectedSuggestions: ['üîç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ e-commerce', 'üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å', 'üí∞ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞']
          },
          {
            user: '–ß—Ç–æ —Ç–∞–∫–æ–µ microenterprises exemption?',
            expectedTerms: ['microenterprises', '–º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è', 'exemption'],
            expectedSuggestions: ['üîç –ö—Ä–∏—Ç–µ—Ä–∏–∏ –º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π', 'üìã –ö–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã', '‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è']
          },
          {
            user: '–°–∫–æ–ª—å–∫–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å? –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å disproportionate burden?',
            expectedTerms: ['disproportionate burden', '–¥–∏—Å–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'],
            expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ disproportionate burden', 'üìä –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏', 'üìã –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å']
          }
        ]
      }
    ]
  },

  {
    persona: '–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨ –ü–†–û–î–£–ö–¢–û–í',
    description: '–ö–æ–º–ø–∞–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
    scenarios: [
      {
        name: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ EAA',
        conversation: [
          {
            user: '–ù–∞—à–∏ –±–∞–Ω–∫–æ–º–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å EAA?',
            expectedTerms: ['–±–∞–Ω–∫–æ–º–∞—Ç—ã', 'ATM', 'self-service terminals'],
            expectedSuggestions: ['üîç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–∞–Ω–∫–æ–º–∞—Ç–∞–º', 'üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', 'üõ†Ô∏è –ö–∞–∫ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å']
          },
          {
            user: '–ß—Ç–æ —Ç–∞–∫–æ–µ conformity assessment –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤?',
            expectedTerms: ['conformity assessment', '–æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è'],
            expectedSuggestions: ['üîç –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏', 'üìã –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', 'üõ†Ô∏è –≠—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ—Å—Å–∞']
          },
          {
            user: '–ù—É–∂–Ω–∞ –ª–∏ technical documentation –∏ —á—Ç–æ –≤ –Ω–µ—ë –≤–∫–ª—é—á–∞—Ç—å?',
            expectedTerms: ['technical documentation', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'],
            expectedSuggestions: ['üìã –°–æ—Å—Ç–∞–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏', 'üîç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é', '‚è∞ –°—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è']
          }
        ]
      }
    ]
  },

  {
    persona: '–Æ–†–ò–°–¢/–ö–û–ú–ü–õ–ê–ï–ù–°',
    description: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
    scenarios: [
      {
        name: '–ü—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã EAA',
        conversation: [
          {
            user: '–ö–∞–∫–∏–µ penalties –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ EAA?',
            expectedTerms: ['penalties', '—à—Ç—Ä–∞—Ñ—ã', 'enforcement'],
            expectedSuggestions: ['üîç –í–∏–¥—ã —Å–∞–Ω–∫—Ü–∏–π', 'üìã –ü–æ–ª–Ω–æ–º–æ—á–∏—è –æ—Ä–≥–∞–Ω–æ–≤', '‚öñÔ∏è –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è']
          },
          {
            user: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç market surveillance –¥–ª—è EAA?',
            expectedTerms: ['market surveillance', '–Ω–∞–¥–∑–æ—Ä –∑–∞ —Ä—ã–Ω–∫–æ–º'],
            expectedSuggestions: ['üîç –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –Ω–∞–¥–∑–æ—Ä–∞', 'üìã –ü–æ–ª–Ω–æ–º–æ—á–∏—è –æ—Ä–≥–∞–Ω–æ–≤', 'üõ†Ô∏è –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è']
          },
          {
            user: '–ß—Ç–æ —Ç–∞–∫–æ–µ EU safeguard procedure?',
            expectedTerms: ['EU safeguard procedure', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞—â–∏—Ç—ã'],
            expectedSuggestions: ['üîç –ö–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è', 'üìã –≠—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ–¥—É—Ä—ã', '‚öñÔ∏è –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è']
          }
        ]
      }
    ]
  }
];

// üé≠ –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º)
const PROBLEMATIC_SCENARIOS = [
  {
    name: '–°—Ü–µ–Ω–∞—Ä–∏–π "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" - –∏—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞',
    description: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏',
    conversation: [
      {
        user: '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º EAA?',
        botResponse: '–î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–µ–±-—Å–∞–π—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º EAA –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤...',
        followUp: '–ß—Ç–æ –∑–∞ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?',
        expectedTerms: ['–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤'],
        expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', 'üìã –ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏', 'üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'],
        problemDescription: '–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω, –Ω–æ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ'
      }
    ]
  },
  {
    name: '–ö–∞—Å–∫–∞–¥ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤',
    description: '–ö–æ–≥–¥–∞ –æ–¥–∏–Ω –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω –≤–µ–¥–µ—Ç –∫ –¥—Ä—É–≥–∏–º',
    conversation: [
      {
        user: '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è conformity assessment?',
        botResponse: '–î–ª—è conformity assessment –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ internal production control —Å–æ–≥–ª–∞—Å–Ω–æ Module A...',
        followUp: '–ß—Ç–æ —Ç–∞–∫–æ–µ internal production control?',
        expectedTerms: ['internal production control'],
        expectedSuggestions: ['üîç –ß—Ç–æ —Ç–∞–∫–æ–µ internal production control', 'üìã –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ Module A'],
        problemDescription: '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã'
      }
    ]
  },
  {
    name: '–°–º–µ—à–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É—Å–ª—É–≥',
    description: '–ü—É—Ç–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —É—Å–ª—É–≥–∞–º',
    conversation: [
      {
        user: '–ù—É–∂–Ω–∞ –ª–∏ CE marking –¥–ª—è –º–æ–µ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
        botResponse: 'CE marking –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º, –∞ –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —É—Å–ª—É–≥–∞–º...',
        followUp: '–ê —á—Ç–æ —Ç–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –¥–ª—è —É—Å–ª—É–≥?',
        expectedTerms: ['service providers', '—É—Å–ª—É–≥–∏'],
        expectedSuggestions: ['üîç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Å–ª—É–≥–∞–º', 'üìã –û—Ç–ª–∏—á–∏—è –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤'],
        problemDescription: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—É—Ç–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ EAA'
      }
    ]
  }
];

/**
 * üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í
 */
async function runRealUserScenarios() {
  console.log('üë• –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í');
  console.log('='.repeat(80));
  
  const results = {
    totalScenarios: 0,
    passedScenarios: 0,
    failedScenarios: 0,
    personas: {},
    conversationIssues: [],
    termDetectionIssues: [],
    suggestionQualityIssues: []
  };

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–º
  for (const persona of REAL_USER_SCENARIOS) {
    console.log(`\nüë§ –ü–ï–†–°–û–ù–ê: ${persona.persona}`);
    console.log(`üìù ${persona.description}`);
    console.log('-'.repeat(60));

    const personaResults = {
      total: persona.scenarios.length,
      passed: 0,
      failed: 0,
      issues: []
    };

    for (const scenario of persona.scenarios) {
      results.totalScenarios++;
      console.log(`\nüé≠ –°–¶–ï–ù–ê–†–ò–ô: ${scenario.name}`);

      try {
        const scenarioResult = await runConversationScenario(scenario.conversation, persona.persona);
        
        if (scenarioResult.success) {
          results.passedScenarios++;
          personaResults.passed++;
          console.log('‚úÖ –°–¶–ï–ù–ê–†–ò–ô –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û');
        } else {
          results.failedScenarios++;
          personaResults.failed++;
          console.log('‚ùå –°–¶–ï–ù–ê–†–ò–ô –ù–ï –ü–†–û–ô–î–ï–ù');
          
          personaResults.issues.push({
            scenario: scenario.name,
            issues: scenarioResult.issues
          });

          // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
          scenarioResult.issues.forEach(issue => {
            if (issue.includes('—Ç–µ—Ä–º–∏–Ω')) {
              results.termDetectionIssues.push({
                persona: persona.persona,
                scenario: scenario.name,
                issue
              });
            } else if (issue.includes('–ø–æ–¥—Å–∫–∞–∑–∫')) {
              results.suggestionQualityIssues.push({
                persona: persona.persona,
                scenario: scenario.name,
                issue
              });
            } else {
              results.conversationIssues.push({
                persona: persona.persona,
                scenario: scenario.name,
                issue
              });
            }
          });
        }

      } catch (error) {
        results.failedScenarios++;
        personaResults.failed++;
        console.error(`üí• –û–®–ò–ë–ö–ê –í –°–¶–ï–ù–ê–†–ò–ò: ${error.message}`);
      }

      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    results.personas[persona.persona] = personaResults;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ï–†–°–û–ù–´ "${persona.persona}":`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${personaResults.passed}/${personaResults.total}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${personaResults.failed}/${personaResults.total}`);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  console.log('\nüö® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í');
  console.log('='.repeat(60));

  for (const problemScenario of PROBLEMATIC_SCENARIOS) {
    results.totalScenarios++;
    console.log(`\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô: ${problemScenario.name}`);
    console.log(`üìù ${problemScenario.description}`);

    try {
      const scenarioResult = await runProblematicScenario(problemScenario);
      
      if (scenarioResult.success) {
        results.passedScenarios++;
        console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –†–ï–®–ï–ù');
      } else {
        results.failedScenarios++;
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ù–ï –†–ï–®–ï–ù');
        console.log(`üîç –ü—Ä–æ–±–ª–µ–º—ã: ${scenarioResult.issues.join(', ')}`);
      }
    } catch (error) {
      results.failedScenarios++;
      console.error(`üí• –û–®–ò–ë–ö–ê –í –ü–†–û–ë–õ–ï–ú–ù–û–ú –°–¶–ï–ù–ê–†–ò–ò: ${error.message}`);
    }

    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateUserScenarioReport(results);
}

/**
 * üí¨ –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø –î–ò–ê–õ–û–ì–ê
 */
async function runConversationScenario(conversation, persona) {
  const issues = [];
  let success = true;
  const sessionId = `scenario_${persona}_${Date.now()}`;

  console.log(`\nüí¨ –ù–ê–ß–ò–ù–ê–ï–ú –î–ò–ê–õ–û–ì (${conversation.length} —Ä–µ–ø–ª–∏–∫):`);

  for (let i = 0; i < conversation.length; i++) {
    const turn = conversation[i];
    console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${turn.user}"`);

    try {
      const response = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: turn.user,
          user_id: `test_${persona.toLowerCase().replace(/\s+/g, '_')}`,
          session_id: sessionId
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`ü§ñ –ë–æ—Ç: "${data.answer?.substring(0, 100)}..."`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      const foundTerms = (data.detectedTerms || []).map(t => t.term.toLowerCase());
      console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: ${foundTerms.join(', ')}`);

      for (const expectedTerm of turn.expectedTerms || []) {
        const found = foundTerms.some(term => 
          term.includes(expectedTerm.toLowerCase()) || 
          expectedTerm.toLowerCase().includes(term)
        );
        
        if (!found) {
          issues.push(`–†–µ–ø–ª–∏–∫–∞ ${i + 1}: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω "${expectedTerm}"`);
          success = false;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const suggestions = data.clarificationQuestions || [];
      console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${suggestions.slice(0, 2).join(' | ')}`);

      for (const expectedSuggestion of turn.expectedSuggestions || []) {
        const found = suggestions.some(suggestion => 
          suggestion.toLowerCase().includes(expectedSuggestion.toLowerCase())
        );
        
        if (!found) {
          issues.push(`–†–µ–ø–ª–∏–∫–∞ ${i + 1}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ "${expectedSuggestion}"`);
          success = false;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      if (turn.context) {
        console.log(`üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${turn.context}`);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      }

    } catch (error) {
      issues.push(`–†–µ–ø–ª–∏–∫–∞ ${i + 1}: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${error.message}`);
      success = false;
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–µ–ø–ª–∏–∫–∞–º–∏ –¥–∏–∞–ª–æ–≥–∞
    await new Promise(resolve => setTimeout(resolve, 1500));
  }

  return { success, issues };
}

/**
 * ‚ö†Ô∏è –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø
 */
async function runProblematicScenario(problemScenario) {
  const issues = [];
  let success = true;
  const sessionId = `problem_${Date.now()}`;

  for (const conversation of problemScenario.conversation) {
    console.log(`\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${conversation.user}"`);
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const firstResponse = await fetch(`${API_BASE}/ask`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        question: conversation.user,
        user_id: 'test_problematic',
        session_id: sessionId
      })
    });

    const firstData = await firstResponse.json();
    console.log(`ü§ñ –ë–æ—Ç: "${firstData.answer?.substring(0, 150)}..."`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω (—Å–∏–º—É–ª–∏—Ä—É–µ–º botResponse)
    const botUsesTerms = conversation.expectedTerms.some(term => 
      firstData.answer?.toLowerCase().includes(term.toLowerCase())
    );

    if (botUsesTerms) {
      console.log(`‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã`);
      
      // –ó–∞–¥–∞–µ–º follow-up –≤–æ–ø—Ä–æ—Å
      console.log(`\nüë§ Follow-up: "${conversation.followUp}"`);
      
      const followUpResponse = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: conversation.followUp,
          user_id: 'test_problematic',
          session_id: sessionId
        })
      });

      const followUpData = await followUpResponse.json();
      console.log(`ü§ñ Follow-up –æ—Ç–≤–µ—Ç: "${followUpData.answer?.substring(0, 100)}..."`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ follow-up
      const foundTerms = (followUpData.detectedTerms || []).map(t => t.term.toLowerCase());
      const suggestions = followUpData.clarificationQuestions || [];

      console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ follow-up: ${foundTerms.join(', ')}`);
      console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ follow-up: ${suggestions.slice(0, 2).join(' | ')}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      for (const expectedTerm of conversation.expectedTerms) {
        const found = foundTerms.some(term => 
          term.includes(expectedTerm.toLowerCase()) || 
          expectedTerm.toLowerCase().includes(term)
        );
        
        if (!found) {
          issues.push(`Follow-up: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω "${expectedTerm}"`);
          success = false;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      for (const expectedSuggestion of conversation.expectedSuggestions || []) {
        const found = suggestions.some(suggestion => 
          suggestion.toLowerCase().includes(expectedSuggestion.toLowerCase())
        );
        
        if (!found) {
          issues.push(`Follow-up: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ "${expectedSuggestion}"`);
          success = false;
        }
      }

    } else {
      issues.push('–ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ');
      success = false;
    }

    await new Promise(resolve => setTimeout(resolve, 1500));
  }

  return { success, issues };
}

/**
 * üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú –°–¶–ï–ù–ê–†–ò–Ø–ú
 */
function generateUserScenarioReport(results) {
  console.log('\n' + '='.repeat(80));
  console.log('üìä –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í');
  console.log('='.repeat(80));

  const successRate = Math.round((results.passedScenarios / results.totalScenarios) * 100);
  
  console.log(`\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${results.passedScenarios}/${results.totalScenarios})`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${results.passedScenarios}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${results.failedScenarios}`);

  console.log(`\nüë• –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ü–ï–†–°–û–ù–ê–ú:`);
  for (const [persona, personaResult] of Object.entries(results.personas)) {
    const personaRate = Math.round((personaResult.passed / personaResult.total) * 100);
    console.log(`   ${persona}: ${personaRate}% (${personaResult.passed}/${personaResult.total})`);
  }

  if (results.termDetectionIssues.length > 0) {
    console.log(`\nüîç –ü–†–û–ë–õ–ï–ú–´ –° –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï–ú –¢–ï–†–ú–ò–ù–û–í (${results.termDetectionIssues.length}):`);
    results.termDetectionIssues.slice(0, 5).forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue.persona} - ${issue.scenario}: ${issue.issue}`);
    });
  }

  if (results.suggestionQualityIssues.length > 0) {
    console.log(`\nüí° –ü–†–û–ë–õ–ï–ú–´ –° –ö–ê–ß–ï–°–¢–í–û–ú –ü–û–î–°–ö–ê–ó–û–ö (${results.suggestionQualityIssues.length}):`);
    results.suggestionQualityIssues.slice(0, 5).forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue.persona} - ${issue.scenario}: ${issue.issue}`);
    });
  }

  if (results.conversationIssues.length > 0) {
    console.log(`\nüí¨ –ü–†–û–ë–õ–ï–ú–´ –° –î–ò–ê–õ–û–ì–û–ú (${results.conversationIssues.length}):`);
    results.conversationIssues.slice(0, 5).forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue.persona} - ${issue.scenario}: ${issue.issue}`);
    });
  }

  console.log(`\nüéØ –û–¶–ï–ù–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –û–ü–´–¢–ê:`);
  if (successRate >= 90) {
    console.log('üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç');
  } else if (successRate >= 80) {
    console.log('üü° –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  } else if (successRate >= 70) {
    console.log('üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º');
  } else {
    console.log('üî¥ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º');
  }

  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(80));
}

// üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
if (require.main === module) {
  runRealUserScenarios()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = {
  runRealUserScenarios,
  REAL_USER_SCENARIOS,
  PROBLEMATIC_SCENARIOS
}; 