/**
 * üöÄ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –ö—Ä–∞—Ç–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
 */

const API_BASE = 'http://localhost:3000/api/v1';

// üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´
const DEMO_TESTS = [
  {
    name: 'üéØ –ò–°–•–û–î–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤',
    description: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    steps: [
      {
        step: 1,
        user: '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º EAA?',
        expectation: '–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –≤ –æ—Ç–≤–µ—Ç–µ'
      },
      {
        step: 2,
        user: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?',
        expectation: '–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏'
      }
    ]
  },
  {
    name: 'üîç –¢–ï–°–¢ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø –¢–ï–†–ú–ò–ù–û–í',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤',
    steps: [
      {
        step: 1,
        user: '–ù—É–∂–Ω–∞ –ª–∏ CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
        expectation: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω "CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞" –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç—ã/—É—Å–ª—É–≥–∏'
      }
    ]
  },
  {
    name: 'üõ†Ô∏è –¢–ï–°–¢ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –¢–ï–†–ú–ò–ù–û–í',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π',
    steps: [
      {
        step: 1,
        user: '–ß—Ç–æ —Ç–∞–∫–æ–µ conformity assessment –¥–ª—è assistive technologies?',
        expectation: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –æ–±–∞ —Ç–µ—Ä–º–∏–Ω–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏'
      }
    ]
  }
];

/**
 * üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ô –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
 */
async function runQuickDemo() {
  console.log('üöÄ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(70));
  console.log('üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"');
  console.log('üìö –ë–∞–∑–∞: ALL_Chapters_0-6.md (2744 —Å—Ç—Ä–æ–∫–∏)');
  console.log('='.repeat(70));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API...');
  try {
    await checkAPI();
    console.log('‚úÖ API –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
  } catch (error) {
    console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:');
    console.log('   cd ParserForChuncks');
    console.log('   npm start');
    return;
  }

  const results = {
    totalTests: 0,
    passedTests: 0,
    failedTests: 0,
    demonstrations: []
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  for (const demo of DEMO_TESTS) {
    console.log(`\n${demo.name}`);
    console.log(`üìù ${demo.description}`);
    console.log('-'.repeat(50));

    const demoResult = {
      name: demo.name,
      steps: [],
      success: true,
      issues: []
    };

    const sessionId = `demo_${Date.now()}`;

    for (const step of demo.steps) {
      results.totalTests++;
      console.log(`\nüìç –®–ê–ì ${step.step}`);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "${step.user}"`);
      console.log(`üéØ –û–∂–∏–¥–∞–Ω–∏–µ: ${step.expectation}`);

      try {
        const startTime = Date.now();
        
        const response = await fetch(`${API_BASE}/ask`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            question: step.user,
            user_id: 'demo_user',
            session_id: sessionId
          })
        });

        const endTime = Date.now();
        const responseTime = endTime - startTime;

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }

        const data = await response.json();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const answer = data.answer || '';
        const foundTerms = (data.detectedTerms || []).map(t => t.term);
        const suggestions = data.clarificationQuestions || [];

        console.log(`ü§ñ –û—Ç–≤–µ—Ç (${answer.length} —Å–∏–º–≤–æ–ª–æ–≤): "${answer.substring(0, 100)}..."`);
        console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: ${foundTerms.join(', ')}`);
        console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${suggestions.slice(0, 2).join(' | ')}`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);

        // –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        let stepPassed = true;
        const stepIssues = [];

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        if (demo.name.includes('–ò–°–•–û–î–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê')) {
          if (step.step === 1) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –±–æ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
            const usesGapAnalysis = answer.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤') || 
                                   answer.toLowerCase().includes('gap analysis');
            if (usesGapAnalysis) {
              console.log('‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"');
            } else {
              console.log('‚ùå –ë–æ—Ç –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"');
              stepIssues.push('–ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ—Ä–º–∏–Ω');
              stepPassed = false;
            }
          } else if (step.step === 2) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            const hasGapTerm = foundTerms.some(term => 
              term.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤') || 
              term.toLowerCase().includes('gap')
            );
            const hasRelevantSuggestions = suggestions.some(s => 
              s.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑') || 
              s.toLowerCase().includes('gap') ||
              s.toLowerCase().includes('–ø—Ä–æ–±–µ–ª')
            );

            if (hasGapTerm) {
              console.log('‚úÖ –¢–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            } else {
              console.log('‚ùå –¢–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
              stepIssues.push('–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π');
              stepPassed = false;
            }

            if (hasRelevantSuggestions) {
              console.log('‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã');
            } else {
              console.log('‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ù–ï –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã');
              stepIssues.push('–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫');
              stepPassed = false;
            }
          }
        } else {
          // –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤
          if (foundTerms.length > 0) {
            console.log('‚úÖ –¢–µ—Ä–º–∏–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
          } else {
            console.log('‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
            stepIssues.push('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã');
            stepPassed = false;
          }

          if (suggestions.length > 0) {
            console.log('‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã');
          } else {
            console.log('‚ö†Ô∏è –ü–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã');
            stepIssues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏');
          }
        }

        if (stepPassed) {
          results.passedTests++;
          console.log('üéâ –®–ê–ì –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û');
        } else {
          results.failedTests++;
          console.log('‚ùå –®–ê–ì –ù–ï –ü–†–û–ô–î–ï–ù');
          console.log(`üîç –ü—Ä–æ–±–ª–µ–º—ã: ${stepIssues.join(', ')}`);
          demoResult.success = false;
          demoResult.issues.push(...stepIssues);
        }

        demoResult.steps.push({
          step: step.step,
          passed: stepPassed,
          responseTime,
          foundTerms: foundTerms.length,
          suggestions: suggestions.length,
          issues: stepIssues
        });

      } catch (error) {
        results.failedTests++;
        console.error(`üí• –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ: ${error.message}`);
        demoResult.success = false;
        demoResult.issues.push(`–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    results.demonstrations.push(demoResult);
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò "${demo.name}":`);
    console.log(`${demoResult.success ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –ù–ï–£–°–ü–ï–®–ù–û'}`);
    if (!demoResult.success) {
      console.log(`üîç –ü—Ä–æ–±–ª–µ–º—ã: ${demoResult.issues.join(', ')}`);
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  generateDemoReport(results);
}

/**
 * üîç –ü–†–û–í–ï–†–ö–ê API
 */
async function checkAPI() {
  try {
    const response = await fetch(`${API_BASE}/ask`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        question: 'test',
        user_id: 'health_check',
        session_id: 'health_check'
      }),
      timeout: 5000
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }

    return true;
  } catch (error) {
    throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
  }
}

/**
 * üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
 */
function generateDemoReport(results) {
  console.log('\n' + '='.repeat(70));
  console.log('üìä –û–¢–ß–ï–¢ –ë–´–°–¢–†–û–ô –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò');
  console.log('='.repeat(70));

  const successRate = Math.round((results.passedTests / results.totalTests) * 100);
  
  console.log(`\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${results.passedTests}/${results.totalTests})`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: ${results.passedTests}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: ${results.failedTests}`);

  console.log(`\nüé≠ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø–ú:`);
  results.demonstrations.forEach((demo, index) => {
    const status = demo.success ? '‚úÖ' : '‚ùå';
    console.log(`   ${index + 1}. ${status} ${demo.name}`);
    if (!demo.success) {
      console.log(`      üîç –ü—Ä–æ–±–ª–µ–º—ã: ${demo.issues.slice(0, 2).join(', ')}`);
    }
  });

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
  const originalProblemDemo = results.demonstrations.find(d => d.name.includes('–ò–°–•–û–î–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê'));
  if (originalProblemDemo) {
    console.log(`\nüéØ –û–¶–ï–ù–ö–ê –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ "–ê–ù–ê–õ–ò–ó –ü–†–û–ë–ï–õ–û–í":`);
    if (originalProblemDemo.success) {
      console.log('üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê! –°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω—ã');
      console.log('   ‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω –ø—Ä–∏ follow-up –≤–æ–ø—Ä–æ—Å–µ');
      console.log('   ‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏');
    } else {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –†–ï–®–ï–ù–ê! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
      console.log(`   üîç –ü—Ä–æ–±–ª–µ–º—ã: ${originalProblemDemo.issues.join(', ')}`);
    }
  }

  console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:`);
  if (successRate >= 90) {
    console.log('üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ');
  } else if (successRate >= 80) {
    console.log('üü° –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏');
  } else if (successRate >= 70) {
    console.log('üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è');
  } else {
    console.log('üî¥ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞');
  }

  console.log('\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  if (successRate >= 90) {
    console.log('   üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: node test-master-suite.js');
    console.log('   üìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
  } else {
    console.log('   üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('   üß™ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é: node test-quick-demo.js');
    console.log('   üìã –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }

  console.log('\nüèÅ –ë–´–°–¢–†–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');
  console.log('='.repeat(70));
}

// üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
if (require.main === module) {
  runQuickDemo()
    .then(() => {
      console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = {
  runQuickDemo,
  DEMO_TESTS
}; 