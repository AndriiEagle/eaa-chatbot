/**
 * –¢–ï–°–¢ –ù–û–í–û–ì–û –ò–ò-–ê–ì–ï–ù–¢–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–û–î–°–ö–ê–ó–û–ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ –±–∞–∑–µ GPT-4o-mini
 */

console.log('ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ò-–ê–ì–ï–ù–¢–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–û–î–°–ö–ê–ó–û–ö\n');

const testAISuggestions = async () => {
  const baseUrl = 'http://localhost:3000/api/v1';
  
  try {
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)...');
    
    const firstInteractionTest = await fetch(`${baseUrl}/agent/ai-suggestions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: 'test-user-new',
        sessionId: 'session-001',
        currentQuestion: '',
        isFirstInteraction: true
      })
    });
    
    if (firstInteractionTest.ok) {
      const result1 = await firstInteractionTest.json();
      console.log('‚úÖ –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –£–°–ü–ï–®–ù–û');
      console.log(`üìù –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${result1.clarificationQuestions?.length || 0}`);
      console.log(`üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${result1.suggestions_header}`);
      console.log(`üß† –õ–æ–≥–∏–∫–∞ –ò–ò: ${result1.reasoning}`);
      console.log(`üìã –ü–æ–¥—Å–∫–∞–∑–∫–∏:`, result1.clarificationQuestions);
    } else {
      console.log('‚ùå –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - –û–®–ò–ë–ö–ê:', await firstInteractionTest.text());
    }
    
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const experiencedUserTest = await fetch(`${baseUrl}/agent/ai-suggestions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: 'test-user-experienced',
        sessionId: 'session-002',
        currentQuestion: '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏?',
        isFirstInteraction: false
      })
    });
    
    if (experiencedUserTest.ok) {
      const result2 = await experiencedUserTest.json();
      console.log('‚úÖ –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –£–°–ü–ï–®–ù–û');
      console.log(`üìù –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${result2.clarificationQuestions?.length || 0}`);
      console.log(`üéØ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${result2.suggestions_header}`);
      console.log(`üß† –õ–æ–≥–∏–∫–∞ –ò–ò: ${result2.reasoning}`);
      console.log(`üìã –ü–æ–¥—Å–∫–∞–∑–∫–∏:`, result2.clarificationQuestions);
    } else {
      console.log('‚ùå –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –û–®–ò–ë–ö–ê:', await experiencedUserTest.text());
    }
    
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ (—Å–∏–º—É–ª—è—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞)...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const questions = [
      '–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?',
      '–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–æ–µ–º—É —Å–∞–π—Ç—É?',
      '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏?'
    ];
    
    for (let i = 0; i < questions.length; i++) {
      console.log(`\n   –®–∞–≥ ${i + 1}: "${questions[i]}"`);
      
      const evolutionTest = await fetch(`${baseUrl}/agent/ai-suggestions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: 'test-user-evolution',
          sessionId: 'session-evolution',
          currentQuestion: questions[i],
          isFirstInteraction: i === 0
        })
      });
      
      if (evolutionTest.ok) {
        const result = await evolutionTest.json();
        console.log(`   ‚úÖ –®–∞–≥ ${i + 1} - –£–°–ü–ï–®–ù–û`);
        console.log(`   üìù –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${result.clarificationQuestions?.length || 0}`);
        console.log(`   üß† –õ–æ–≥–∏–∫–∞: ${result.reasoning}`);
        console.log(`   üìã –ü–æ–¥—Å–∫–∞–∑–∫–∏:`, result.clarificationQuestions);
      } else {
        console.log(`   ‚ùå –®–∞–≥ ${i + 1} - –û–®–ò–ë–ö–ê:`, await evolutionTest.text());
      }
    }
    
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
    
    const errorTest = await fetch(`${baseUrl}/agent/ai-suggestions`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        currentQuestion: '—Ç–µ—Å—Ç'
      })
    });
    
    if (errorTest.status === 400) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –£–°–ü–ï–®–ù–û (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Ä–Ω—É–ª 400)');
    } else {
      console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - –ù–ï–û–ñ–ò–î–ê–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:', errorTest.status);
    }
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('‚úÖ –ò–ò-–∞–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üß† –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ GPT-4o-mini');
    console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏');
    console.log('üíæ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
    console.log('üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞');
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.log('\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω (npm run dev)');
    console.log('2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ localhost:3000)');
    console.log('3. –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API –∫–ª—é—á–æ–º');
    console.log('4. –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –ò–ò-–∞–≥–µ–Ω—Ç–∞');
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAISuggestions(); 