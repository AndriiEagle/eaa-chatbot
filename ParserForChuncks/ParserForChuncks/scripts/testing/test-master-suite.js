/**
 * üéØ –ú–ê–°–¢–ï–†-–ù–ê–ë–û–† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í EAA
 * 
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ä–º–∏–Ω–æ–≤
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Ç–∏–ø–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
 */

const API_BASE = 'http://localhost:3000/api/v1';

// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
const MASTER_TEST_CONFIG = {
  runComprehensiveTests: true,
  runEdgeCaseTests: true,
  runUserScenarioTests: true,
  runPerformanceTests: true,
  runStressTests: true,
  generateDetailedReport: true,
  saveResultsToFile: true
};

// üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
const PERFORMANCE_TESTS = [
  {
    name: '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å',
    question: '–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?',
    maxResponseTime: 3000,
    expectedTerms: ['EAA', 'European Accessibility Act']
  },
  {
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞',
    question: '–ö–∞–∫ –ø—Ä–æ–≤–µ—Å—Ç–∏ conformity assessment –¥–ª—è self-service terminals —Å–æ–≥–ª–∞—Å–Ω–æ internal production control Module A —Å —É—á–µ—Ç–æ–º functional performance criteria –∏ harmonized standards?',
    maxResponseTime: 8000,
    expectedTerms: ['conformity assessment', 'self-service terminals', 'internal production control', 'Module A', 'functional performance criteria', 'harmonized standards']
  },
  {
    name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ',
    question: '–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É manufacturers, importers, distributors –∏ service providers –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ EAA obligations.',
    maxResponseTime: 6000,
    expectedTerms: ['manufacturers', 'importers', 'distributors', 'service providers', 'obligations']
  }
];

// üî• –°–¢–†–ï–°–°-–¢–ï–°–¢–´
const STRESS_TESTS = [
  {
    name: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥',
    requests: 10,
    question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ EAA?'
  },
  {
    name: '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
    parallel: 5,
    question: '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å CE marking –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞?'
  },
  {
    name: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
    description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
    question: `–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ manufacturers –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–æ–¥–∏—Ç—å conformity assessment –¥–ª—è products —Å–æ–≥–ª–∞—Å–Ω–æ European Accessibility Act, –≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞–Ω–∏–µ technical documentation, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ internal production control —Å–æ–≥–ª–∞—Å–Ω–æ Module A, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É EU Declaration of Conformity, –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CE marking, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ compliance —Å accessibility requirements –¥–ª—è persons with disabilities, –ø–æ–¥–¥–µ—Ä–∂–∫—É assistive technologies –≤–∫–ª—é—á–∞—è screen readers, voice control, eye tracking, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ functional performance criteria –¥–ª—è people without vision, with limited vision, who cannot perceive color, without hearing, with limited hearing, without vocal capability, with limited manipulation or strength, with limited reach, with photosensitive seizure disorders, with cognitive limitations, —É—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö exemptions –ø–æ disproportionate burden –∏–ª–∏ fundamental alteration, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ market surveillance –ø—Ä–æ–≤–µ—Ä–∫–∞–º, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å distributors –∏ importers, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ built environment accessibility –≥–¥–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ, —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ harmonized standards –∏ technical specifications, –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ periodic reviews –∏ cooperation —Å authorities.`
  }
];

/**
 * üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
 */
async function runMasterTestSuite() {
  console.log('üéØ –ó–ê–ü–£–°–ö –ú–ê–°–¢–ï–†-–ù–ê–ë–û–†–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í EAA');
  console.log('='.repeat(90));
  console.log('üé™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Ç–∏–ø–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"');
  console.log('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: ALL_Chapters_0-6.md (2744 —Å—Ç—Ä–æ–∫–∏)');
  console.log('='.repeat(90));

  const masterResults = {
    startTime: new Date(),
    endTime: null,
    totalDuration: 0,
    testSuites: {},
    overallStats: {
      totalTests: 0,
      passedTests: 0,
      failedTests: 0,
      successRate: 0
    },
    criticalIssues: [],
    recommendations: [],
    systemReadiness: 'unknown'
  };

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò API...');
    await checkAPIAvailability();
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');

    // 2. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if (MASTER_TEST_CONFIG.runComprehensiveTests) {
      console.log('\nüìã –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–´–• –¢–ï–°–¢–û–í...');
      try {
        const { runComprehensiveTests } = require('./test-comprehensive-scenarios.js');
        await runComprehensiveTests();
        masterResults.testSuites.comprehensive = { status: 'completed', success: true };
        console.log('‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö:', error.message);
        masterResults.testSuites.comprehensive = { status: 'failed', error: error.message };
        masterResults.criticalIssues.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö');
      }
    }

    // 3. –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if (MASTER_TEST_CONFIG.runEdgeCaseTests) {
      console.log('\nüî¨ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í...');
      try {
        const { runEdgeCaseTests } = require('./test-edge-cases.js');
        await runEdgeCaseTests();
        masterResults.testSuites.edgeCases = { status: 'completed', success: true };
        console.log('‚úÖ –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:', error.message);
        masterResults.testSuites.edgeCases = { status: 'failed', error: error.message };
        masterResults.criticalIssues.push('–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤');
      }
    }

    // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    if (MASTER_TEST_CONFIG.runUserScenarioTests) {
      console.log('\nüë• –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –°–¶–ï–ù–ê–†–ò–ï–í...');
      try {
        const { runRealUserScenarios } = require('./test-real-user-scenarios.js');
        await runRealUserScenarios();
        masterResults.testSuites.userScenarios = { status: 'completed', success: true };
        console.log('‚úÖ –¢–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö:', error.message);
        masterResults.testSuites.userScenarios = { status: 'failed', error: error.message };
        masterResults.criticalIssues.push('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º');
      }
    }

    // 5. –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (MASTER_TEST_CONFIG.runPerformanceTests) {
      console.log('\n‚ö° –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò...');
      const performanceResults = await runPerformanceTests();
      masterResults.testSuites.performance = performanceResults;
      console.log('‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    }

    // 6. –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
    if (MASTER_TEST_CONFIG.runStressTests) {
      console.log('\nüî• –ó–ê–ü–£–°–ö –°–¢–†–ï–°–°-–¢–ï–°–¢–û–í...');
      const stressResults = await runStressTests();
      masterResults.testSuites.stress = stressResults;
      console.log('‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    }

    // 7. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
    console.log('\nüéØ –¢–ï–°–¢ –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ "–ê–ù–ê–õ–ò–ó –ü–†–û–ë–ï–õ–û–í"...');
    const originalProblemResult = await testOriginalProblem();
    masterResults.testSuites.originalProblem = originalProblemResult;

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    masterResults.endTime = new Date();
    masterResults.totalDuration = masterResults.endTime - masterResults.startTime;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    generateMasterReport(masterResults);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    if (MASTER_TEST_CONFIG.saveResultsToFile) {
      await saveResultsToFile(masterResults);
    }

  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
    masterResults.criticalIssues.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    generateMasterReport(masterResults);
  }
}

/**
 * üîç –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò API
 */
async function checkAPIAvailability() {
  try {
    const response = await fetch(`${API_BASE}/health`, {
      method: 'GET',
      timeout: 5000
    });

    if (!response.ok) {
      throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP ${response.status}`);
    }

    const data = await response.json();
    console.log(`üìä –°—Ç–∞—Ç—É—Å API: ${data.status || 'OK'}`);
    
    return true;
  } catch (error) {
    // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
    try {
      const response = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: 'test',
          user_id: 'health_check',
          session_id: 'health_check'
        }),
        timeout: 5000
      });

      if (response.ok) {
        console.log('üìä API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ /ask endpoint');
        return true;
      }
    } catch (secondError) {
      throw new Error(`API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
  }
}

/**
 * ‚ö° –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 */
async function runPerformanceTests() {
  console.log('‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  const results = {
    status: 'completed',
    tests: [],
    averageResponseTime: 0,
    slowTests: [],
    fastTests: []
  };

  let totalResponseTime = 0;

  for (const test of PERFORMANCE_TESTS) {
    console.log(`\n‚è±Ô∏è –¢–ï–°–¢: ${test.name}`);
    console.log(`‚ùì –í–æ–ø—Ä–æ—Å: "${test.question}"`);
    console.log(`‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${test.maxResponseTime}ms`);

    const startTime = Date.now();
    
    try {
      const response = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: test.question,
          user_id: 'performance_test',
          session_id: `perf_${Date.now()}`
        })
      });

      const endTime = Date.now();
      const responseTime = endTime - startTime;
      totalResponseTime += responseTime;

      const data = await response.json();
      const foundTerms = (data.detectedTerms || []).map(t => t.term.toLowerCase());

      const testResult = {
        name: test.name,
        responseTime,
        maxResponseTime: test.maxResponseTime,
        passed: responseTime <= test.maxResponseTime,
        foundTerms: foundTerms.length,
        expectedTerms: test.expectedTerms.length
      };

      results.tests.push(testResult);

      if (responseTime <= test.maxResponseTime) {
        console.log(`‚úÖ –ë–´–°–¢–†–û: ${responseTime}ms (–ª–∏–º–∏—Ç: ${test.maxResponseTime}ms)`);
        results.fastTests.push(testResult);
      } else {
        console.log(`‚ùå –ú–ï–î–õ–ï–ù–ù–û: ${responseTime}ms (–ª–∏–º–∏—Ç: ${test.maxResponseTime}ms)`);
        results.slowTests.push(testResult);
      }

      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: ${foundTerms.length}/${test.expectedTerms.length}`);

    } catch (error) {
      console.error(`üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
      results.tests.push({
        name: test.name,
        error: error.message,
        passed: false
      });
    }

    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  results.averageResponseTime = Math.round(totalResponseTime / PERFORMANCE_TESTS.length);
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:`);
  console.log(`‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${results.averageResponseTime}ms`);
  console.log(`‚úÖ –ë—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${results.fastTests.length}`);
  console.log(`‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${results.slowTests.length}`);

  return results;
}

/**
 * üî• –°–¢–†–ï–°–°-–¢–ï–°–¢–´
 */
async function runStressTests() {
  console.log('üî• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤...');
  
  const results = {
    status: 'completed',
    tests: [],
    errors: [],
    totalRequests: 0,
    successfulRequests: 0
  };

  for (const test of STRESS_TESTS) {
    console.log(`\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢: ${test.name}`);
    console.log(`üìù ${test.description}`);

    try {
      let testResult;

      if (test.requests) {
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        testResult = await runSequentialRequests(test);
      } else if (test.parallel) {
        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        testResult = await runParallelRequests(test);
      } else {
        // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        testResult = await runSingleStressRequest(test);
      }

      results.tests.push(testResult);
      results.totalRequests += testResult.totalRequests || 1;
      results.successfulRequests += testResult.successfulRequests || (testResult.success ? 1 : 0);

    } catch (error) {
      console.error(`üí• –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ: ${error.message}`);
      results.errors.push({
        test: test.name,
        error: error.message
      });
    }
  }

  const successRate = Math.round((results.successfulRequests / results.totalRequests) * 100);
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–û–í:`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${results.successfulRequests}/${results.totalRequests})`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${results.errors.length}`);

  return results;
}

/**
 * üìà –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´
 */
async function runSequentialRequests(test) {
  console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ ${test.requests} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
  
  const results = {
    name: test.name,
    totalRequests: test.requests,
    successfulRequests: 0,
    errors: [],
    responseTimes: []
  };

  for (let i = 0; i < test.requests; i++) {
    const startTime = Date.now();
    
    try {
      const response = await fetch(`${API_BASE}/ask`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: test.question,
          user_id: 'stress_sequential',
          session_id: `stress_seq_${i}_${Date.now()}`
        })
      });

      const endTime = Date.now();
      const responseTime = endTime - startTime;
      results.responseTimes.push(responseTime);

      if (response.ok) {
        results.successfulRequests++;
        console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i + 1}: ${responseTime}ms`);
      } else {
        results.errors.push(`–ó–∞–ø—Ä–æ—Å ${i + 1}: HTTP ${response.status}`);
        console.log(`‚ùå –ó–∞–ø—Ä–æ—Å ${i + 1}: HTTP ${response.status}`);
      }

    } catch (error) {
      results.errors.push(`–ó–∞–ø—Ä–æ—Å ${i + 1}: ${error.message}`);
      console.log(`üí• –ó–∞–ø—Ä–æ—Å ${i + 1}: ${error.message}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  const avgResponseTime = results.responseTimes.length > 0 
    ? Math.round(results.responseTimes.reduce((a, b) => a + b, 0) / results.responseTimes.length)
    : 0;

  console.log(`üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${avgResponseTime}ms`);
  
  return results;
}

/**
 * ‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´
 */
async function runParallelRequests(test) {
  console.log(`‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ ${test.parallel} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
  
  const promises = [];
  
  for (let i = 0; i < test.parallel; i++) {
    const promise = fetch(`${API_BASE}/ask`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        question: test.question,
        user_id: 'stress_parallel',
        session_id: `stress_par_${i}_${Date.now()}`
      })
    });
    
    promises.push(promise);
  }

  const startTime = Date.now();
  const results = await Promise.allSettled(promises);
  const endTime = Date.now();
  const totalTime = endTime - startTime;

  const successful = results.filter(r => r.status === 'fulfilled' && r.value.ok).length;
  const failed = results.length - successful;

  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful}/${test.parallel}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed}/${test.parallel}`);
  console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);

  return {
    name: test.name,
    totalRequests: test.parallel,
    successfulRequests: successful,
    totalTime,
    success: successful === test.parallel
  };
}

/**
 * üìù –û–î–ò–ù–û–ß–ù–´–ô –°–¢–†–ï–°–°-–ó–ê–ü–†–û–°
 */
async function runSingleStressRequest(test) {
  console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (${test.question.length} —Å–∏–º–≤–æ–ª–æ–≤)...`);
  
  const startTime = Date.now();
  
  try {
    const response = await fetch(`${API_BASE}/ask`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        question: test.question,
        user_id: 'stress_long',
        session_id: `stress_long_${Date.now()}`
      })
    });

    const endTime = Date.now();
    const responseTime = endTime - startTime;

    if (response.ok) {
      const data = await response.json();
      const foundTerms = (data.detectedTerms || []).length;
      
      console.log(`‚úÖ –î–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ ${responseTime}ms`);
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–æ–≤: ${foundTerms}`);
      
      return {
        name: test.name,
        responseTime,
        foundTerms,
        success: true
      };
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ HTTP ${response.status}`);
      return {
        name: test.name,
        error: `HTTP ${response.status}`,
        success: false
      };
    }

  } catch (error) {
    console.log(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    return {
      name: test.name,
      error: error.message,
      success: false
    };
  }
}

/**
 * üéØ –¢–ï–°–¢ –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´
 */
async function testOriginalProblem() {
  console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"...');
  
  const sessionId = `original_problem_${Date.now()}`;
  
  // –®–∞–≥ 1: –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ—Ä–º–∏–Ω–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
  console.log('\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º EAA?"');
  
  const firstResponse = await fetch(`${API_BASE}/ask`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      question: '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º EAA?',
      user_id: 'original_problem_test',
      session_id: sessionId
    })
  });

  const firstData = await firstResponse.json();
  console.log(`ü§ñ –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª (${firstData.answer?.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –±–æ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
  const usesGapAnalysis = firstData.answer?.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤') || 
                         firstData.answer?.toLowerCase().includes('gap analysis');
  
  console.log(`üîç –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤": ${usesGapAnalysis ? '–î–ê' : '–ù–ï–¢'}`);

  if (usesGapAnalysis) {
    // –®–∞–≥ 2: –ó–∞–¥–∞–µ–º follow-up –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–µ
    console.log('\nüë§ Follow-up: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?"');
    
    const followUpResponse = await fetch(`${API_BASE}/ask`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?',
        user_id: 'original_problem_test',
        session_id: sessionId
      })
    });

    const followUpData = await followUpResponse.json();
    console.log(`ü§ñ Follow-up –æ—Ç–≤–µ—Ç (${followUpData.answer?.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const foundTerms = (followUpData.detectedTerms || []).map(t => t.term.toLowerCase());
    const suggestions = followUpData.clarificationQuestions || [];
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: ${foundTerms.join(', ')}`);
    console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${suggestions.slice(0, 3).join(' | ')}`);
    
    const hasGapAnalysisTerm = foundTerms.some(term => 
      term.includes('–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤') || term.includes('gap analysis')
    );
    
    const hasRelevantSuggestions = suggestions.some(s => 
      s.toLowerCase().includes('–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤') || 
      s.toLowerCase().includes('gap') ||
      s.toLowerCase().includes('–ø—Ä–æ–±–µ–ª')
    );

    const problemSolved = hasGapAnalysisTerm && hasRelevantSuggestions;
    
    console.log(`\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´:`);
    console.log(`‚úÖ –¢–µ—Ä–º–∏–Ω –Ω–∞–π–¥–µ–Ω: ${hasGapAnalysisTerm ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: ${hasRelevantSuggestions ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`üéâ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: ${problemSolved ? '–î–ê' : '–ù–ï–¢'}`);

    return {
      status: 'completed',
      problemSolved,
      botUsedTerm: usesGapAnalysis,
      termDetected: hasGapAnalysisTerm,
      relevantSuggestions: hasRelevantSuggestions,
      foundTermsCount: foundTerms.length,
      suggestionsCount: suggestions.length
    };
  } else {
    console.log('\n‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –≤ –æ—Ç–≤–µ—Ç–µ');
    return {
      status: 'completed',
      problemSolved: false,
      botUsedTerm: false,
      reason: '–ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ—Ä–º–∏–Ω'
    };
  }
}

/**
 * üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ê–°–¢–ï–†-–û–¢–ß–ï–¢–ê
 */
function generateMasterReport(results) {
  console.log('\n' + '='.repeat(90));
  console.log('üéØ –ò–¢–û–ì–û–í–´–ô –ú–ê–°–¢–ï–†-–û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –¢–ï–†–ú–ò–ù–û–í EAA');
  console.log('='.repeat(90));

  const duration = Math.round(results.totalDuration / 1000);
  console.log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
  console.log(`üìÖ –ù–∞—á–∞–ª–æ: ${results.startTime.toLocaleString()}`);
  console.log(`üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${results.endTime?.toLocaleString() || '–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}`);

  console.log(`\nüìä –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ù–ê–ë–û–†–´ –¢–ï–°–¢–û–í:`);
  for (const [suiteName, suiteResult] of Object.entries(results.testSuites)) {
    const status = suiteResult.status === 'completed' ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${suiteName}: ${suiteResult.status}`);
    if (suiteResult.error) {
      console.log(`      ‚ö†Ô∏è –û—à–∏–±–∫–∞: ${suiteResult.error}`);
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ
  if (results.testSuites.originalProblem) {
    const op = results.testSuites.originalProblem;
    console.log(`\nüéØ –¢–ï–°–¢ –ò–°–•–û–î–ù–û–ô –ü–†–û–ë–õ–ï–ú–´ "–ê–ù–ê–õ–ò–ó –ü–†–û–ë–ï–õ–û–í":`);
    console.log(`   üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞: ${op.problemSolved ? '–î–ê ‚úÖ' : '–ù–ï–¢ ‚ùå'}`);
    if (op.problemSolved) {
      console.log(`   ‚úÖ –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ä–º–∏–Ω: ${op.botUsedTerm}`);
      console.log(`   ‚úÖ –¢–µ—Ä–º–∏–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${op.termDetected}`);
      console.log(`   ‚úÖ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: ${op.relevantSuggestions}`);
    } else {
      console.log(`   ‚ùå –ü—Ä–∏—á–∏–Ω–∞: ${op.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
    }
  }

  // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  if (results.testSuites.performance) {
    const perf = results.testSuites.performance;
    console.log(`\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:`);
    console.log(`   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${perf.averageResponseTime}ms`);
    console.log(`   ‚úÖ –ë—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${perf.fastTests?.length || 0}`);
    console.log(`   ‚ùå –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${perf.slowTests?.length || 0}`);
  }

  // –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã
  if (results.testSuites.stress) {
    const stress = results.testSuites.stress;
    console.log(`\nüî• –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:`);
    console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((stress.successfulRequests / stress.totalRequests) * 100)}%`);
    console.log(`   üìä –ó–∞–ø—Ä–æ—Å–æ–≤: ${stress.successfulRequests}/${stress.totalRequests}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${stress.errors?.length || 0}`);
  }

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (results.criticalIssues.length > 0) {
    console.log(`\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (${results.criticalIssues.length}):`);
    results.criticalIssues.forEach((issue, index) => {
      console.log(`   ${index + 1}. ${issue}`);
    });
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (results.recommendations.length > 0) {
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (${results.recommendations.length}):`);
    results.recommendations.forEach((rec, index) => {
      console.log(`   ${index + 1}. ${rec}`);
    });
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
  console.log(`\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:`);
  
  const completedSuites = Object.values(results.testSuites).filter(s => s.status === 'completed').length;
  const totalSuites = Object.keys(results.testSuites).length;
  const completionRate = Math.round((completedSuites / totalSuites) * 100);
  
  const originalProblemSolved = results.testSuites.originalProblem?.problemSolved || false;
  const hasPerformanceIssues = results.testSuites.performance?.slowTests?.length > 0;
  const hasStressIssues = results.testSuites.stress?.errors?.length > 0;
  const hasCriticalIssues = results.criticalIssues.length > 0;

  if (originalProblemSolved && completionRate >= 90 && !hasCriticalIssues) {
    results.systemReadiness = 'excellent';
    console.log('üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
    console.log('   ‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞');
    console.log('   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    console.log('   ‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º');
  } else if (originalProblemSolved && completionRate >= 80) {
    results.systemReadiness = 'good';
    console.log('üü° –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏');
    console.log('   ‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞');
    console.log('   ‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è');
  } else if (originalProblemSolved) {
    results.systemReadiness = 'acceptable';
    console.log('üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    console.log('   ‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞');
    console.log('   ‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã');
  } else {
    results.systemReadiness = 'poor';
    console.log('üî¥ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ò—Å—Ö–æ–¥–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï —Ä–µ—à–µ–Ω–∞');
    console.log('   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞ "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤" –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('   ‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  }

  console.log(`\nüìà –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${completionRate}% (${completedSuites}/${totalSuites})`);
  
  console.log('\nüèÅ –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(90));
}

/**
 * üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í –§–ê–ô–õ
 */
async function saveResultsToFile(results) {
  const fs = require('fs').promises;
  const path = require('path');
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `test-results-${timestamp}.json`;
  const filepath = path.join(__dirname, 'test-results', filename);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(path.dirname(filepath), { recursive: true });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await fs.writeFile(filepath, JSON.stringify(results, null, 2), 'utf8');
    
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
  }
}

// üöÄ –ó–ê–ü–£–°–ö –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
if (require.main === module) {
  runMasterTestSuite()
    .then(() => {
      console.log('\nüéâ –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ú–ê–°–¢–ï–†-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error);
      process.exit(1);
    });
}

module.exports = {
  runMasterTestSuite,
  PERFORMANCE_TESTS,
  STRESS_TESTS
}; 