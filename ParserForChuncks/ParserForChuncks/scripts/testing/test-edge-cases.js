/**
 * üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í –ò –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –ü–†–û–ë–õ–ï–ú
 * 
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ —Ç–µ—Ä–º–∏–Ω–æ–≤
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ ALL_Chapters_0-6.md
 */

const API_BASE = 'http://localhost:3000/api/v1';

// üéØ –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
const EDGE_CASE_TESTS = [
  {
    category: '–°–ú–ï–®–ê–ù–ù–´–ï –Ø–ó–´–ö–ò',
    description: '–¢–µ—Å—Ç—ã —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö',
    tests: [
      {
        name: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ —Ä—É—Å—Å–∫–æ–º —Ç–µ–∫—Å—Ç–µ',
        question: '–ú–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ gap analysis –∏ —É–±–µ–¥–∏—Ç—å—Å—è –≤ WCAG compliance –º–æ–µ–≥–æ —Å–∞–π—Ç–∞',
        expectedTerms: ['gap analysis', 'WCAG compliance'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º'
      },
      {
        name: '–†—É—Å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞–º–∏',
        question: '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å CE marking –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏?',
        expectedTerms: ['CE marking', '–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—à–∞–Ω–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é'
      },
      {
        name: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å',
        question: 'How to conduct conformity assessment for assistive technologies under EAA?',
        expectedTerms: ['conformity assessment', 'assistive technologies', 'EAA'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è'
      }
    ]
  },

  {
    category: '–ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –í–ê–†–ò–ê–¶–ò–ò',
    description: '–†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π',
    tests: [
      {
        name: '–°–∏–Ω–æ–Ω–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤',
        question: '–ö–∞–∫ –Ω–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º?',
        expectedTerms: ['–ø—Ä–æ–±–µ–ª—ã', '–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω —Å–≤—è–∑–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–æ–º "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"'
      },
      {
        name: '–†–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞',
        question: '–ù—É–∂–Ω–∞ –ª–∏ –æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ conformity assessment –¥–ª—è –º–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?',
        expectedTerms: ['–æ—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è', 'conformity assessment'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–æ—Ü–µ—Å—Å'
      },
      {
        name: '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏',
        question: '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–æ–π —Å–∞–π—Ç –ø–æ–¥—Ö–æ–¥–∏–ª –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é?',
        expectedTerms: ['–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '–ª—é–¥–∏ —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é', 'persons with disabilities'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω —Å–≤—è–∑–∞—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏'
      }
    ]
  },

  {
    category: '–°–õ–û–ñ–ù–´–ï –ö–û–ù–°–¢–†–£–ö–¶–ò–ò',
    description: '–î–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏',
    tests: [
      {
        name: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏',
        question: 'Manufacturers –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ conformity assessment, –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å technical documentation –∏ –ø–æ–ª—É—á–∏—Ç—å CE marking –¥–ª—è products, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è persons with disabilities.',
        expectedTerms: ['Manufacturers', 'conformity assessment', 'technical documentation', 'CE marking', 'products', 'persons with disabilities'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –Ω–µ –ø—É—Ç–∞—Ç—å –∏—Ö –º–µ–∂–¥—É —Å–æ–±–æ–π'
      },
      {
        name: '–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏',
        question: '–ö–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å functional performance criteria –¥–ª—è assistive technologies, –≤–∫–ª—é—á–∞—è screen readers –∏ voice control systems, –≤ —Ä–∞–º–∫–∞—Ö harmonized standards?',
        expectedTerms: ['functional performance criteria', 'assistive technologies', 'screen readers', 'voice control systems', 'harmonized standards'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é —Ç–µ—Ä–º–∏–Ω–æ–≤'
      },
      {
        name: '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
        question: '–í —Ä–∞–º–∫–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ June 2025 deadline –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ manufacturer –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ gap analysis –¥–ª—è –≤—Å–µ—Ö –Ω–∞—à–∏—Ö products, –≤–∫–ª—é—á–∞—è self-service terminals –∏ mobile applications, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ compliance —Å accessibility requirements –¥–ª—è persons with disabilities, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–∞—Å–∞—é—â–∏—Ö—Å—è screen reader compatibility and keyboard navigation support.',
        expectedTerms: ['June 2025', 'manufacturer', 'gap analysis', 'products', 'self-service terminals', 'mobile applications', 'compliance', 'accessibility requirements', 'persons with disabilities', 'screen reader', 'keyboard navigation'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã'
      }
    ]
  },

  {
    category: '–ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –õ–û–ñ–ù–´–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–Ø',
    description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è',
    tests: [
      {
        name: '–û–±—â–∏–µ —Å–ª–æ–≤–∞, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è —Ç–µ—Ä–º–∏–Ω–∞–º–∏',
        question: '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ç–æ–≥–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞.',
        expectedTerms: [],
        expectedBehavior: '–ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–µ—Ä–º–∏–Ω—ã –≤ –æ–±—â–∏—Ö —Å–ª–æ–≤–∞—Ö'
      },
      {
        name: '–°–ª–æ–≤–∞, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ç–µ—Ä–º–∏–Ω—ã',
        question: '–Ø —Ö–æ—á—É –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏.',
        expectedTerms: [],
        expectedBehavior: '–ù–ï –¥–æ–ª–∂–µ–Ω –ø—É—Ç–∞—Ç—å "–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞" —Å "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤"'
      },
      {
        name: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å EAA',
        question: '–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–∏—â–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤?',
        expectedTerms: [],
        expectedBehavior: '–ù–ï –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å EAA —Ç–µ—Ä–º–∏–Ω—ã –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ'
      }
    ]
  },

  {
    category: '–°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ EAA',
    description: '–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
    tests: [
      {
        name: '–ü—É—Ç–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏',
        question: '–ù—É–∂–Ω–∞ –ª–∏ CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞?',
        expectedTerms: ['CE –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞', '–≤–µ–±-—Å–∞–π—Ç'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ —É—Å–ª—É–≥–∞–º–∏'
      },
      {
        name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤',
        question: '–î–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω—É–∂–Ω–æ –≤–Ω–µ–¥—Ä–∏—Ç—å EAA —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è?',
        expectedTerms: ['EAA', 'June 2025'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
      },
      {
        name: '–ü—É—Ç–∞–Ω–∏—Ü–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏',
        question: '–ú–æ–µ –º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –æ—Ç –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π EAA?',
        expectedTerms: ['–º–∏–∫—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', 'microenterprises', '–∏—Å–∫–ª—é—á–µ–Ω–∏—è'],
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—ä—è—Å–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π'
      }
    ]
  },

  {
    category: '–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò –ù–ê–ì–†–£–ó–ö–ê',
    description: '–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    tests: [
      {
        name: '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Ä–º–∏–Ω',
        question: '–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?',
        expectedTerms: ['EAA'],
        maxResponseTime: 2000,
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å'
      },
      {
        name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
        question: '–û–±—ä—è—Å–Ω–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å conformity assessment –¥–ª—è manufacturers, –≤–∫–ª—é—á–∞—è –≤—Å–µ —ç—Ç–∞–ø—ã –æ—Ç gap analysis –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è CE marking.',
        expectedTerms: ['conformity assessment', 'manufacturers', 'gap analysis', 'CE marking'],
        maxResponseTime: 8000,
        expectedBehavior: '–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è'
      }
    ]
  }
];

/**
 * üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í
 */
async function runEdgeCaseTests() {
  console.log('üî¨ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í');
  console.log('='.repeat(70));
  
  const results = {
    totalTests: 0,
    passedTests: 0,
    failedTests: 0,
    categories: {},
    issues: [],
    falsePositives: [],
    performanceIssues: []
  };

  for (const category of EDGE_CASE_TESTS) {
    console.log(`\nüìÇ –ö–ê–¢–ï–ì–û–†–ò–Ø: ${category.category}`);
    console.log(`üìù ${category.description}`);
    console.log('-'.repeat(50));

    const categoryResults = {
      total: category.tests.length,
      passed: 0,
      failed: 0,
      issues: []
    };

    for (const test of category.tests) {
      results.totalTests++;
      console.log(`\nüß™ –¢–ï–°–¢: ${test.name}`);
      console.log(`‚ùì –í–æ–ø—Ä–æ—Å: "${test.question}"`);
      console.log(`üéØ –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: ${test.expectedTerms.join(', ')}`);
      console.log(`üìã –ü–æ–≤–µ–¥–µ–Ω–∏–µ: ${test.expectedBehavior}`);

      try {
        const startTime = Date.now();
        
        const response = await fetch(`${API_BASE}/ask`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            question: test.question,
            user_id: 'edge_case_test',
            session_id: `edge_${Date.now()}`
          })
        });

        const endTime = Date.now();
        const responseTime = endTime - startTime;

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        const foundTerms = (data.detectedTerms || []).map(t => t.term.toLowerCase());
        const suggestions = data.clarificationQuestions || [];

        console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: ${foundTerms.join(', ')}`);
        console.log(`üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${suggestions.slice(0, 2).join(' | ')}`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let testPassed = true;
        const testIssues = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        for (const expectedTerm of test.expectedTerms) {
          const found = foundTerms.some(term => 
            term.includes(expectedTerm.toLowerCase()) || 
            expectedTerm.toLowerCase().includes(term)
          );
          
          if (!found) {
            testIssues.push(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ—Ä–º–∏–Ω: "${expectedTerm}"`);
            testPassed = false;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
        if (test.expectedTerms.length === 0 && foundTerms.length > 0) {
          testIssues.push(`–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω—ã —Ç–µ—Ä–º–∏–Ω—ã ${foundTerms.join(', ')}`);
          results.falsePositives.push({
            test: test.name,
            foundTerms: foundTerms
          });
          testPassed = false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if (test.maxResponseTime && responseTime > test.maxResponseTime) {
          testIssues.push(`–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms > ${test.maxResponseTime}ms`);
          results.performanceIssues.push({
            test: test.name,
            responseTime,
            maxTime: test.maxResponseTime
          });
          testPassed = false;
        }

        if (testPassed) {
          results.passedTests++;
          categoryResults.passed++;
          console.log('‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù');
        } else {
          results.failedTests++;
          categoryResults.failed++;
          console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
          console.log(`üîç –ü—Ä–æ–±–ª–µ–º—ã: ${testIssues.join(', ')}`);
          
          categoryResults.issues.push({
            test: test.name,
            issues: testIssues
          });
          
          results.issues.push({
            category: category.category,
            ...errorIssue
          });
        }

      } catch (error) {
        results.failedTests++;
        categoryResults.failed++;
        console.error(`üí• –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: ${error.message}`);
        
        const errorIssue = {
          test: test.name,
          issues: [`–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`]
        };
        
        categoryResults.issues.push(errorIssue);
        results.issues.push({
          category: category.category,
          ...errorIssue
        });
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1500));
    }

    results.categories[category.category] = categoryResults;
    
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–¢–ï–ì–û–†–ò–ò "${category.category}":`);
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${categoryResults.passed}/${categoryResults.total}`);
    console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: ${categoryResults.failed}/${categoryResults.total}`);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateEdgeCaseReport(results);
}

/**
 * üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –ü–û –ì–†–ê–ù–ò–ß–ù–´–ú –°–õ–£–ß–ê–Ø–ú
 */
function generateEdgeCaseReport(results) {
  console.log('\n' + '='.repeat(70));
  console.log('üìä –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í');
  console.log('='.repeat(70));

  const successRate = Math.round((results.passedTests / results.totalTests) * 100);
  
  console.log(`\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}% (${results.passedTests}/${results.totalTests})`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.passedTests}`);
  console.log(`‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${results.failedTests}`);

  console.log(`\nüìÇ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:`);
  for (const [categoryName, categoryResult] of Object.entries(results.categories)) {
    const categoryRate = Math.round((categoryResult.passed / categoryResult.total) * 100);
    console.log(`   ${categoryName}: ${categoryRate}% (${categoryResult.passed}/${categoryResult.total})`);
  }

  if (results.falsePositives.length > 0) {
    console.log(`\n‚ö†Ô∏è –õ–û–ñ–ù–´–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–Ø (${results.falsePositives.length}):`);
    results.falsePositives.forEach((fp, index) => {
      console.log(`   ${index + 1}. ${fp.test}: ${fp.foundTerms.join(', ')}`);
    });
  }

  if (results.performanceIssues.length > 0) {
    console.log(`\n‚è±Ô∏è –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò (${results.performanceIssues.length}):`);
    results.performanceIssues.forEach((pi, index) => {
      console.log(`   ${index + 1}. ${pi.test}: ${pi.responseTime}ms (–ª–∏–º–∏—Ç: ${pi.maxTime}ms)`);
    });
  }

  if (results.issues.length > 0) {
    console.log(`\nüîç –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (${results.issues.length}):`);
    results.issues.slice(0, 10).forEach((issue, index) => {
      console.log(`   ${index + 1}. [${issue.category}] ${issue.test}: ${issue.issues.join(', ')}`);
    });
  }

  console.log(`\nÔøΩÔøΩ –û–¶–ï–ù–ö–ê –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ö –ì–†–ê–ù–ò–ß–ù–´–ú –°–õ–£–ß–ê–Ø–ú:`);
  if (successRate >= 90) {
    console.log('üü¢ –û–¢–õ–ò–ß–ù–û: –°–∏—Å—Ç–µ–º–∞ —É—Å—Ç–æ–π—á–∏–≤–∞ –∫ –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞—è–º');
  } else if (successRate >= 80) {
    console.log('üü° –•–û–†–û–®–û: –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏');
  } else if (successRate >= 70) {
    console.log('üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏');
  } else {
    console.log('üî¥ –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏');
  }

  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–ù–ò–ß–ù–´–• –°–õ–£–ß–ê–ï–í –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('='.repeat(70));
}

// üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
if (require.main === module) {
  runEdgeCaseTests()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = {
  runEdgeCaseTests,
  EDGE_CASE_TESTS
}; 