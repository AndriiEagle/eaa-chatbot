import { Request, Response } from 'express';
import OpenAI from 'openai';
import formidable, { Fields, Files } from 'formidable';
import fs from 'fs';
import { toFile } from 'openai/uploads';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export const transcribeAudio = async (req: Request, res: Response) => {
  console.log('üé§ [Whisper] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é');

  const form = formidable({
    multiples: false,
    maxFileSize: 25 * 1024 * 1024, // 25MB
  });

  form.parse(req, async (err: Error | null, fields: Fields, files: Files) => {
    if (err) {
      console.error('‚ùå [Whisper] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–º—ã:', err);
      return res
        .status(500)
        .json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.', details: err.message });
    }

    const audioFile = files.audio;

    if (!audioFile || !Array.isArray(audioFile) || audioFile.length === 0) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ.' });
    }

    const file = audioFile[0];
    const originalFilePath = file.filepath as string;
    const originalName = (file as any).originalFilename || 'audio.webm';
    const mimeType = (file as any).mimetype || 'audio/webm';

    try {
      console.log(
        `üîä [Whisper] –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: ${originalName}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç, mime: ${mimeType}`
      );
      console.log(`üìÅ [Whisper] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${originalFilePath}`);

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π FileLike –¥–ª—è SDK
      const buffer = await fs.promises.readFile(originalFilePath);
      const fileForOpenAI = await toFile(buffer, originalName, { type: mimeType });

      console.log('‚è≥ [Whisper] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ OpenAI Whisper API...');
      const transcription = await openai.audio.transcriptions.create({
        file: fileForOpenAI,
        model: 'whisper-1',
        language: 'ru',
      });

      console.log('‚úÖ [Whisper] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');

      // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      fs.unlink(originalFilePath, unlinkErr => {
        if (unlinkErr) {
          console.error('‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª:', unlinkErr);
        }
      });

      res.status(200).json({ transcript: transcription.text });
    } catch (error: any) {
      // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      fs.unlink(originalFilePath, unlinkErr => {
        if (unlinkErr) {
          console.error(
            '‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:',
            unlinkErr
          );
        }
      });

      const details = error?.response?.data || error?.message || 'Unknown error';
      console.error('‚ùå [Whisper] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', details);

      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.', details });
    }
  });
};
