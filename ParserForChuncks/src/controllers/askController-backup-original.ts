import { Request, Response } from 'express';
import { createTimer, createPerformanceMetrics, PerformanceMetrics } from '../utils/metrics/timers.js';
import { formatRAGContext, formatSourcesMetadata, formatJsonObjects } from '../utils/formatting/formatters.js';
import { chatMemory } from '../utils/memory/index.js';
import { preprocessQuery } from '../utils/preprocessing/preprocessQuery.js';
import { smartSplitQuestions } from '../utils/questionSplitting/splitQuestions.js';
import { containsBusinessInfo, processBusinessInfo } from '../utils/business/businessInfoProcessor.js';
import { generatePersonalizedSuggestions, generatePersonalizedSuggestionsSync } from '../utils/suggestions/suggestionGenerator.js';
import { createEmbedding, generateCompletion, generateStreamingCompletion } from '../services/openaiService.js';
import { findRelevantChunks, logQuery } from '../services/supabaseService.js';
import { openai } from '../services/openaiService.js';
import { AskRequest, EnhancedResponse, UserDataAnalysisResult } from '../types/common.js';
import { MAX_CONTEXT_CHUNKS, CHAT_MODEL } from '../config/environment.js';
import { STRICT_SYSTEM_PROMPT, CONCISE_SYSTEM_PROMPT } from '../config/prompts.js';
import type { ChatCompletionMessageParam } from 'openai/resources/chat/completions';
import { v4 as uuidv4 } from 'uuid';
import { UserFact } from '../utils/memory/types.js';
import { analyzeUserData, formatMissingDataTypes } from '../utils/userDataAnalysis.js';
import { UserFact as CommonUserFact } from '../types/common';
import { handleSimpleQuery } from '../utils/preprocessing/simpleQueryHandler.js';
// ü§ñ IMPORTS OF NEW AI AGENTS
import { FrustrationDetectionAgent } from '../services/frustrationDetectionAgent.js';
import { EmailComposerAgent } from '../services/emailComposerAgent.js';

// Get timer prototype and add elapsed method
const timerPrototype = Object.getPrototypeOf(createTimer());
Object.defineProperty(timerPrototype, 'elapsed', {
  get: function() {
    return this.duration || 0;
  }
});

// ü§ñ INITIALIZATION OF AI AGENTS
const frustrationAgent = new FrustrationDetectionAgent({
  minimumFrustrationLevel: 0.75, // Conservative threshold
  minimumConfidence: 0.85,       // High confidence
  minimumTriggers: 2             // Minimum 2 triggers
});

const emailComposer = new EmailComposerAgent();

// Types and interfaces 
interface QuestionResult {
  question: string;
  answer: string;
  sources: any[]; // Use any[] for compatibility with various source formats
  performance: {
    embedding_ms: number;
    search_ms: number;
    generate_ms?: number;
  };
}

interface MultipleQuestionsResponse {
  results: QuestionResult[];
  performance: PerformanceMetrics;
  clarificationQuestions: string[];
  infoTemplates: string[];
  suggestions_header: string;
}

interface SourceMetadata {
  id?: string;
  text?: string;
  title?: string;
  relevance?: number;
  metadata?: {
    path?: string;
    title?: string;
    date?: string;
    tags?: string[];
    [key: string]: any;
  };
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ChatMemoryManager –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
interface ChatMemoryManager {
  saveConversationPair: (
    sessionId: string, 
    userMessage: string, 
    assistantMessage: string,
    metadata?: Record<string, any>
  ) => Promise<void>;
  createContextForRequest?: (
    userId: string,
    sessionId: string,
    question: string
  ) => Promise<string | null>;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
async function processQuestion(
  question: string, 
  dataset_id: string, 
  similarity_threshold: number, 
  max_chunks: number
): Promise<{
  embedding: any;
  chunks: any[];
  embeddingTime: number;
  searchTime: number;
}> {
  const embeddingTimer = createTimer();
  const searchTimer = createTimer();

  // –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  embeddingTimer.reset();
  const embedding = await createEmbedding(question);
  embeddingTimer.stop();

  // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
  searchTimer.reset();
  const chunks = await findRelevantChunks(embedding, dataset_id, similarity_threshold, max_chunks);
  searchTimer.stop();

  return {
    embedding,
    chunks,
    embeddingTime: embeddingTimer.duration,
    searchTime: searchTimer.duration
  };
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø UserFact –∏–∑ –º–æ–¥—É–ª—è –ø–∞–º—è—Ç–∏ –≤ —Ç–∏–ø UserFact –∏–∑ common
function convertUserFacts(facts: UserFact[]): CommonUserFact[] {
  return facts.map(fact => ({
    type: fact.fact_type,
    value: fact.fact_value,
    confidence: fact.confidence,
    source: fact.source_message_id
  } as CommonUserFact));
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ /ask
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥, —Ä–∞–∑–±–∏–≤–∫—É, –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
 */
export const askController = async (req: Request, res: Response): Promise<void> => {
  // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const timerTotal = createTimer();
  
  // ---- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è ----
  let clarifyMode = false;
  let clarifyQuestionsArr: string[] = [];
  let clarifyTemplatesArr: string[] = [];
  let clarifyHeader = '';
  let preliminaryAnalysisData: any = undefined;
  // ---- –∫–æ–Ω–µ—Ü –≤—Å—Ç–∞–≤–∫–∏ ----
  
  console.log('\n===========================================================');
  console.log('üìù [ASK] –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method Not Allowed. Use POST instead.' });
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const {
    question,
    session_id = null,
    user_id = 'anonymous',
    dataset_id = 'eaa',
    similarity_threshold = 0.78,
    max_chunks = MAX_CONTEXT_CHUNKS || 5,
    stream = false
  } = req.body as AskRequest & { stream?: boolean };

  if (!question || typeof question !== 'string' || question.trim().length === 0) {
    res.status(400).json({ error: 'Question is required and must be a non-empty string.' });
    return;
  }

  console.log(`üë§ User ID: ${user_id} | üí¨ Session ID: ${session_id || 'new'}`);
  console.log(`‚ùì Question: ${question}`);
  
  try {
    // –≠—Ç–∞–ø 0: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞)
    const simpleQueryResult = await handleSimpleQuery(question);
    if (simpleQueryResult.is_simple_query && simpleQueryResult.response_text) {
      console.log('‚úÖ [SimpleQueryAgent] –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç—Ä–æ—É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–∞
      res.setHeader('Content-Type', 'text/event-stream');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');

      const writeEvent = (event: string, data: object) => {
        res.write(`event: ${event}\n`);
        res.write(`data: ${JSON.stringify(data)}\n\n`);
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ
      writeEvent('message', { chunk: simpleQueryResult.response_text, type: 'content' });
      writeEvent('end', { message: 'Stream ended' });
      res.end();
      
      console.log('‚ÑπÔ∏è [MEMORY] –ü—Ä–æ—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é.');
      return;
    }
    console.log('üßê [SimpleQueryAgent] –ó–∞–ø—Ä–æ—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    let actualSessionId: string;
    
    try {
      if (session_id) {
        // –ï—Å–ª–∏ ID —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const sessionExists = await chatMemory.sessionExists(session_id);
        
        if (sessionExists) {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
          console.log(`‚úÖ [SESSION] –°–µ—Å—Å–∏—è ${session_id} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          actualSessionId = session_id;
        } else {
          // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π ID
          console.log(`üÜï [SESSION] –°–µ—Å—Å–∏—è ${session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å —ç—Ç–∏–º ID`);
          actualSessionId = await chatMemory.createSession(user_id, { 
            id: session_id, // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º ID –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å —Ç–µ–º –∂–µ ID
            device: req.headers['user-agent'] 
          });
          console.log(`‚úÖ [SESSION] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å ID: ${actualSessionId}`);
        }
      } else {
        // –ï—Å–ª–∏ ID —Å–µ—Å—Å–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        console.log(`üÜï [SESSION] –°–µ—Å—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é`);
        actualSessionId = await chatMemory.createSession(user_id, { 
          device: req.headers['user-agent'] 
        });
        console.log(`‚úÖ [SESSION] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å ID: ${actualSessionId}`);
      }
    } catch (sessionError) {
      console.error('‚ùå [SESSION] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–µ—Å—Å–∏–µ–π:', sessionError);
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      actualSessionId = 'temp_' + uuidv4();
      console.log(`‚ö†Ô∏è [SESSION] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏: ${actualSessionId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    let userFacts: UserFact[] = [];
    let isFirstInteraction = true;
    
    try {
      userFacts = await chatMemory.getUserFacts(user_id);
      isFirstInteraction = userFacts.length === 0;
    } catch (factsError) {
      console.error('‚ùå [FACTS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', factsError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ñ–∞–∫—Ç–æ–≤
    }
    
    // –£–ª—É—á—à–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let enhancedQuestion = question;
    
    if (question.length < 150 && userFacts.length > 0) {
      const businessFacts = userFacts.filter((f: UserFact) => f.fact_type.startsWith('business_') && f.confidence > 0.7);
      if (businessFacts.length > 0) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –æ –±–∏–∑–Ω–µ—Å–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        const businessType = businessFacts.find((f: UserFact) => f.fact_type === 'business_type')?.fact_value;
        const businessLocation = businessFacts.find((f: UserFact) => f.fact_type === 'business_location')?.fact_value;
        const digitalPresence = businessFacts.find((f: UserFact) => f.fact_type === 'business_digital_presence')?.fact_value;
        
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –≤–æ–ø—Ä–æ—Å—É –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (businessType) {
          console.log(`üîÑ [ENHANCE] –£–ª—É—á—à–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞: ${businessType}`);
          
          // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–∏–ø–µ –±–∏–∑–Ω–µ—Å–∞, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
          if (!question.toLowerCase().includes(businessType.toLowerCase())) {
            enhancedQuestion = `–ö–æ–Ω—Ç–µ–∫—Å—Ç: —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é ${businessType}${businessLocation ? ' –≤ ' + businessLocation : ''}${digitalPresence ? ', —É –Ω–∞—Å –µ—Å—Ç—å ' + digitalPresence : ''}. –í–æ–ø—Ä–æ—Å: ${question}`;
          }
        }
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
    const preprocessTimer = createTimer();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const containsNewBusinessInfo = containsBusinessInfo(question);
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    const preprocessed = await preprocessQuery(enhancedQuestion);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞
    preprocessTimer.stop();
    console.log(`‚è± [PREPROCESS] Time: ${preprocessTimer.duration}ms`);

    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ–π –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if (containsNewBusinessInfo) {
      console.log('üîç [BUSINESS INFO] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
      const businessResponse = await processBusinessInfo({
        question,
        user_id,
        session_id: actualSessionId,
        dataset_id,
        similarity_threshold,
        max_chunks,
        isFirstInteraction,
        timerTotal
      });
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É, —á—Ç–æ–±—ã –∏—Å–ø—Ä–∞–≤–∏—Ç—å [object Object] –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
      if (businessResponse.answer) {
        businessResponse.answer = formatJsonObjects(businessResponse.answer);
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const { clarificationQuestions, infoTemplates, header } = generatePersonalizedSuggestionsSync(
        await chatMemory.getUserFacts(user_id), // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ñ–∞–∫—Ç—ã
        [], 
        isFirstInteraction,
        question,
        user_id,
        actualSessionId
      );
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const infoResponse: EnhancedResponse = {
        ...businessResponse,
        clarificationQuestions,
        infoTemplates,
        suggestions_header: header
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
      try {
        await chatMemory.saveConversationPair(
          actualSessionId,
          question,
          infoResponse.answer,
          {
            assistant: {
              sources: infoResponse.sources
            }
          }
        );
      } catch (saveError) {
        console.error('‚ùå [CHAT_MEMORY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:', saveError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥
      }
      
      res.status(200).json(infoResponse);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    if (!preprocessed.isRelevant) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      const { clarificationQuestions, infoTemplates, header } = generatePersonalizedSuggestionsSync(
        userFacts, 
        [], 
        isFirstInteraction,
        question,
        user_id,
        actualSessionId
      );
      
      const notRelevantResponse: EnhancedResponse = {
        answer: preprocessed.explanation || '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–º—É –∞–∫—Ç—É –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (EAA) –∏–ª–∏ –≤–µ–±-–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö EAA, –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ–±-—Ä–µ—à–µ–Ω–∏–π.',
        sources: [],
        no_results: true,
        performance: {
          embedding_ms: 0,
          search_ms: 0,
          generate_ms: 0,
          total_ms: Math.round(performance.now() - timerTotal.start)
        },
        clarificationQuestions,
        infoTemplates,
        needs_clarification: false,
        suggestions_header: header
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
      try {
        await chatMemory.saveConversationPair(
          actualSessionId,
          question,
          notRelevantResponse.answer
        );
      } catch (e) {
        console.error('‚ùå [CHAT_MEMORY] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', e);
      }
      
      // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
      res.status(200).json(notRelevantResponse);
      return;
    }

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (preprocessed.needsClarification && !containsNewBusinessInfo) {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥: –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ >15 % –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Ç—Ä–µ–±—É–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–π
      const commonUserFactsTmp = convertUserFacts(userFacts);
      const analysisTmp = analyzeUserData(commonUserFactsTmp, question);
      if (analysisTmp.completeness > 0.15) {
        console.log('‚ÑπÔ∏è [CLARIFY] –î–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (>15%), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ');
      } else {
        console.log('‚ùî [CLARIFY] –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è');
        
        const commonUserFacts = convertUserFacts(userFacts);
        const userDataAnalysis = analyzeUserData(commonUserFacts, question);
        
        console.log(`üìä [CLARIFY] –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: ${Math.round(userDataAnalysis.completeness * 100)}%`);
        
        const { clarificationQuestions, infoTemplates, header } = generatePersonalizedSuggestionsSync(
          await chatMemory.getUserFacts(user_id), // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ —Ñ–∞–∫—Ç—ã
          [], 
          isFirstInteraction,
          question,
          user_id,
          actualSessionId
        );
          
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        clarifyMode = true;
        clarifyQuestionsArr = clarificationQuestions;
        clarifyTemplatesArr = infoTemplates;
        clarifyHeader = header || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ:';
        if (userDataAnalysis.completeness > 0.2) {
          preliminaryAnalysisData = userDataAnalysis;
        }
        //  NOTE: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ
      }
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (preprocessed.splitQuestions.length > 1) {
      console.log(`üë• [MULTI] Processing multiple questions with ${preprocessed.splitQuestions.length} questions`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
      res.setHeader('Content-Type', 'text/event-stream');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');
      res.flushHeaders(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

      const writeEvent = (data: object) => {
        res.write(`data: ${JSON.stringify(data)}\n\n`);
      };

      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å—Ç—Ä–∏–º–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for (const question of preprocessed.splitQuestions) {
          console.log(`‚ùì [STREAMING] Processing question: ${question}`);
          
          const { chunks, embeddingTime, searchTime } = await processQuestion(
            question,
            dataset_id,
            similarity_threshold,
            max_chunks
          );

          if (chunks.length === 0) {
            writeEvent({
              type: 'new_answer',
              content: {
                question,
                answer: 'Sorry, I could not find information for your query.',
                sources: [],
                performance: { embedding_ms: embeddingTime, search_ms: searchTime }
              }
            });
            continue;
          }

          const context = formatRAGContext(chunks, question);
          const messages: ChatCompletionMessageParam[] = [
            { role: 'system', content: CONCISE_SYSTEM_PROMPT },
            { role: 'user', content: context }
          ];

          const completion = await openai.chat.completions.create({
            model: CHAT_MODEL,
            messages,
            temperature: 0
          });

          const answer = completion.choices[0].message.content || '';
          const sources = formatSourcesMetadata(chunks);

          const result: QuestionResult = {
            question,
            answer: formatJsonObjects(answer),
            sources,
            performance: {
              embedding_ms: embeddingTime,
              search_ms: searchTime,
              generate_ms: completion.usage?.total_tokens ? completion.usage.total_tokens * 10 : 0 // –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            }
          };
          
          writeEvent({ type: 'new_answer', content: result });
          
          // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          chatMemory.saveConversationPair(actualSessionId, question, result.answer).catch(console.error);
        }
        
        // –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const { clarificationQuestions, infoTemplates, header } = generatePersonalizedSuggestionsSync(
            userFacts, [], false, question, user_id, actualSessionId
        );
        
        writeEvent({
          type: 'meta',
          content: {
            performance: { total_ms: Math.round(performance.now() - timerTotal.start) },
            clarificationQuestions,
            infoTemplates,
            suggestions_header: header,
          }
        });

      } catch (error) {
        console.error('‚ùå [STREAMING] Error during multi-question stream:', error);
        writeEvent({ type: 'error', content: { message: 'An error occurred during the stream.' } });
      } finally {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–∏–º
        writeEvent({ type: 'done' });
        res.end();
        return;
      }
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    console.log('‚ùì [SINGLE] Processing single question');
    
    // Use reformulated question if available
    const finalQuestion = preprocessed.reformulatedQuery || enhancedQuestion;
    console.log(`üîÑ [REWRITE] ${finalQuestion !== question ? 'Query reformulated' : 'Query left unchanged'}`);
    
    // Create timers for performance measurement
    const generateTimer = createTimer();
    
    try {
      // Process query in parallel
      const { embedding, chunks, embeddingTime, searchTime } = await processQuestion(
        finalQuestion, 
        dataset_id, 
        similarity_threshold, 
        max_chunks
      );
      
      console.log(`üîç [SEARCH] Found ${chunks.length} relevant chunks`);
      
      // Create unique query identifier
      const queryId = uuidv4();
      
      // Check if relevant chunks were found
      if (chunks.length === 0) {
        console.log('‚ö†Ô∏è [NO_RESULTS] No relevant chunks found');
        
        // Generate personalized suggestions via AI agent
        const { clarificationQuestions, infoTemplates, header } = await generatePersonalizedSuggestions(
          userFacts, 
          [], 
          isFirstInteraction,
          question,
          user_id,
          actualSessionId
        );
        
        const noResultsResponse: EnhancedResponse = {
          answer: 'Sorry, I could not find information for your query in the European Accessibility Act knowledge base. Please rephrase your question or choose one of the suggested options.',
          sources: [],
          no_results: true,
          performance: createPerformanceMetrics({
            embedding: { 
              duration: embeddingTime,
              start: 0,
              end: 0,
              stop: () => {},
              reset: () => {}
            },
            search: { 
              duration: searchTime,
              start: 0,
              end: 0,
              stop: () => {},
              reset: () => {}
            },
            total: timerTotal
          }),
          needs_clarification: true,
          clarificationQuestions,
          infoTemplates,
          suggestions_header: header
        };
        
        // Save interaction to history (asynchronously)
        chatMemory.saveConversationPair(
          actualSessionId,
          question,
          noResultsResponse.answer
        ).catch(e => console.error('‚ùå [CHAT_MEMORY] Error saving messages:', e));
        
        res.status(200).json(noResultsResponse);
        return;
      }
      
      // Format chunks into context for query
      const context = formatRAGContext(chunks, finalQuestion);
      
      // Generate context for query with dialog history (if available)
      let enhancedContext = context;
      
      if (chatMemory.createContextForRequest) {
        try {
          const chatContext = await chatMemory.createContextForRequest(user_id, actualSessionId, finalQuestion);
          if (chatContext) {
            console.log('üìú [CONTEXT] Added context from dialog history');
            enhancedContext = `${chatContext}\n\n${context}`;
          }
        } catch (e) {
          console.error('‚ùå [CHAT_MEMORY] Error creating context from history:', e);
        }
      }
      
      // Create messages for API
      const messages: ChatCompletionMessageParam[] = [
        { role: 'system', content: STRICT_SYSTEM_PROMPT },
        { role: 'user', content: enhancedContext }
      ];
      
      // Generate answer with streaming
      generateTimer.reset();
      
      // Set headers for streaming
      res.setHeader('Content-Type', 'text/event-stream');
      res.setHeader('Transfer-Encoding', 'chunked');
      res.setHeader('Cache-Control', 'no-cache');
      res.setHeader('Connection', 'keep-alive');
      
      try {
        const stream = await generateStreamingCompletion(messages, 0);
        
        let fullAnswer = '';
        const writeEvent = (event: string, data: object) => {
            res.write(`event: ${event}\n`);
            res.write(`data: ${JSON.stringify(data)}\n\n`);
        };

        for await (const chunk of stream) {
          const content = chunk.choices[0]?.delta?.content || '';
          if (content) {
            fullAnswer += content;
            writeEvent('message', { chunk: content, type: 'content' });
          }
        }
        
        generateTimer.stop();
        writeEvent('end', { message: 'Stream ended' });
        res.end();
        
        // Apply formatting to full answer
        const formattedAnswer = formatJsonObjects(fullAnswer);
        
        // Rest of the logic executed in background...
        setImmediate(async () => {
          try {
            // üß† NEW FUNCTION: Term analysis in bot response
            let termAnalysis: any = null;
            try {
              console.log('üîç [TERM_ANALYSIS] Starting term analysis in bot response...');
              const { termAnalysisAgent } = await import('../services/termAnalysisAgent.js');
              termAnalysis = await termAnalysisAgent.analyzeResponse(
                formattedAnswer, 
                actualSessionId, 
                user_id
              );
              
              if (termAnalysis.shouldGenerateClarifications) {
                console.log(`‚úÖ [TERM_ANALYSIS] Found ${termAnalysis.detectedTerms.length} terms for clarification`);
                console.log(`üéØ [TERM_ANALYSIS] Generated ${termAnalysis.contextualSuggestions.length} contextual suggestions`);
              }
            } catch (termError) {
              console.error('‚ùå [TERM_ANALYSIS] Error analyzing terms:', termError);
            }
            
            // Format sources
            const sources = formatSourcesMetadata(chunks);
            
                         // Run background tasks
             const backgroundTasks = Promise.allSettled([
              // Log query to database
              logQuery(
                question,
                finalQuestion !== question ? finalQuestion : null,
                formattedAnswer,
                dataset_id,
                chunks.map((c: any) => c.id),
                queryId
              ),
              
              // Save interaction to history
              chatMemory.saveConversationPair(
                actualSessionId,
                question,
                formattedAnswer,
                {
                  assistant: {
                    sources
                  }
                }
              ),
              
              // ü§ñ FRUSTRATION ANALYSIS OF USER
              (async () => {
                try {
                  console.log('\nüîç [FRUSTRATION] Starting user frustration analysis...');
                  
                  const recentMessages = await chatMemory.getSessionMessages(actualSessionId);
                  
                  const frustrationAnalysis = await frustrationAgent.analyzeFrustration(
                    question,
                    recentMessages,
                    actualSessionId,
                    user_id
                  );
                  
                  console.log(`üìä [FRUSTRATION] Analysis result: level ${frustrationAnalysis.frustrationLevel.toFixed(2)}, escalation: ${frustrationAnalysis.shouldEscalate}`);
                  
                  if (frustrationAnalysis.shouldEscalate) {
                    console.log('üö® [ESCALATION] High frustration level! Generating email for manager...');
                    
                    try {
                      const emailDraft = await emailComposer.generateEmail({
                        userId: user_id,
                        sessionId: actualSessionId,
                        frustrationAnalysis: frustrationAnalysis,
                        userFacts: convertUserFacts(userFacts),
                        recentMessages: recentMessages,
                        businessContext: 'EAA Compliance Chatbot'
                      });
                      
                      console.log('üìß [ESCALATION] Email generated and saved to DB as draft');
                      console.log(`üìù [ESCALATION] Email subject: "${emailDraft.subject}"`);
                      console.log(`üéØ [ESCALATION] Sales potential: ${emailDraft.salesPotential}, urgency: ${emailDraft.urgencyLevel}`);
                      
                    } catch (emailError) {
                      console.error('‚ùå [ESCALATION] Error generating email:', emailError);
                    }
                  } else {
                    console.log('‚úÖ [FRUSTRATION] Frustration level is normal, no escalation needed');
                  }
                  
                } catch (frustrationError) {
                  console.error('‚ùå [FRUSTRATION] Error analyzing frustration:', frustrationError);
                }
              })()
            ]);
            
                         backgroundTasks.catch((errors: any) => {
               console.error('‚ùå [BACKGROUND] Errors in background tasks:', errors);
             });
            
          } catch (error) {
            console.error('‚ùå [BACKGROUND] Error in background processing:', error);
          }
        });
        
      } catch (streamError) {
        console.error('‚ùå [STREAM] Error in streaming:', streamError);
        // Fallback to regular response
        const completion = await openai.chat.completions.create({
          model: CHAT_MODEL,
          messages,
          temperature: 0
        });
        generateTimer.stop();
        
        const answer = completion.choices[0].message.content || '';
        const formattedAnswer = formatJsonObjects(answer);
        
        // Send regular JSON response as fallback
        res.status(200).json({
          answer: formattedAnswer,
          sources: formatSourcesMetadata(chunks),
          no_results: false,
          performance: createPerformanceMetrics({
            total: timerTotal,
            embedding: { 
              duration: embeddingTime,
              start: 0,
              end: 0,
              stop: () => {},
              reset: () => {}
            },
            search: { 
              duration: searchTime,
              start: 0,
              end: 0,
              stop: () => {},
              reset: () => {}
            },
            generate: generateTimer
          })
        });
      }

    } catch (error) {
      console.error('‚ùå [ERROR] Error processing query:', error);
      
      const errorResponse: EnhancedResponse = {
        answer: 'Sorry, an error occurred while processing your query. Please try again later or contact the administrator.',
        sources: [],
        no_results: true,
        performance: createPerformanceMetrics({
          total: timerTotal
        }),
        needs_clarification: false,
        clarificationQuestions: [],
        infoTemplates: [],
        suggestions_header: ''
      };
      
      res.status(500).json(errorResponse);
    }

  } catch (error: any) {
    console.error('‚ùå [ERROR] Error processing query:', error);
    
    // Send error to user
    res.status(500).json({
      error: 'An error occurred while processing your query',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
}

// Logging multiple queries to database
const logMultipleQueries = async (
  questions: string[],
  answers: string[],
  datasetId: string,
  queryId: string
) => {
  try {
    console.log('üìù [LOG] Logging multiple queries to database');
    // Log each question with corresponding answer
    for (let i = 0; i < questions.length; i++) {
      await logQuery(
        questions[i],
        null,
        answers[i],
        datasetId,
        [], // No identifiers for chunks for simplicity
        `${queryId}-${i}`
      );
    }
  } catch (error) {
    console.error('‚ùå [LOG] Error logging multiple queries:', error);
  }
}; 