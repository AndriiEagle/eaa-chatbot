import { UserFact, ChatMessage } from './types.js';
import { SupabaseClient } from '@supabase/supabase-js';
import { OpenAI } from 'openai';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export class FactManager {
  constructor(
    private supabase: SupabaseClient,
    private openai: OpenAI
  ) {}

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param factType –¢–∏–ø —Ñ–∞–∫—Ç–∞
   * @param factValue –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞
   * @param confidence –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ñ–∞–∫—Ç–µ (0-1)
   * @param sourceMessageId ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–∞–∫—Ç–∞
   * @returns ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
   */
  async saveUserFact(
    userId: string,
    factType: string,
    factValue: string,
    confidence: number = 1.0,
    sourceMessageId: string = ''
  ): Promise<string> {
    try {
      // Validate required parameters
      if (!userId || !factType || !factValue) {
        console.error('‚ùå [FACTS] Missing required parameters for saving fact');
        throw new Error('Missing required parameters for saving fact');
      }

      // Validate confidence range
      if (confidence < 0 || confidence > 1) {
        console.warn(
          `‚ö†Ô∏è [FACTS] Invalid confidence value: ${confidence}, using 1.0`
        );
        confidence = 1.0;
      }

      console.log(
        `üíæ [FACTS] Saving fact for user ${userId}: ${factType} = ${factValue}`
      );

      const factId = uuidv4();
      const timestamp = new Date().toISOString();

      // Try to update existing fact first
      const { data: existingFact } = await this.supabase
        .from('user_facts')
        .select('id')
        .eq('user_id', userId)
        .eq('fact_type', factType)
        .single();

      if (existingFact) {
        // Update existing fact
        const { error } = await this.supabase
          .from('user_facts')
          .update({
            fact_value: factValue,
            confidence: confidence,
            source_message_id: sourceMessageId,
            updated_at: timestamp,
          })
          .eq('id', existingFact.id);

        if (error) {
          console.error('‚ùå [FACTS] Error updating fact:', error);
          throw new Error(`Error updating fact: ${error.message}`);
        }

        console.log(`‚úÖ [FACTS] Fact updated successfully: ${factType}`);
        return existingFact.id;
      } else {
        // Create new fact
        const { error } = await this.supabase.from('user_facts').insert({
          id: factId,
          user_id: userId,
          fact_type: factType,
          fact_value: factValue,
          confidence: confidence,
          source_message_id: sourceMessageId,
          created_at: timestamp,
          updated_at: timestamp,
        });

        if (error) {
          console.error('‚ùå [FACTS] Error saving fact:', error);
          throw new Error(`Error saving fact: ${error.message}`);
        }

        console.log(`‚úÖ [FACTS] New fact saved successfully: ${factType}`);
        return factId;
      }
    } catch (error) {
      console.error('‚ùå [FACTS] Error in saveUserFact:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async getUserFacts(userId: string): Promise<UserFact[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data, error } = await this.supabase
        .from('user_facts')
        .select('*')
        .eq('user_id', userId)
        .order('updated_at', { ascending: false });

      if (error) {
        console.error(
          `‚ùå [MEMORY] Error getting facts for user ${userId}:`,
          error
        );
        return [];
      }

      return data as UserFact[];
    } catch (e) {
      console.error(`‚ùå [MEMORY] Error getting facts for user ${userId}:`, e);
      return [];
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ñ–∞–∫—Ç—ã
   * @param messageContent –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async extractFactsFromUserMessage(
    messageContent: string,
    sessionId: string,
    messageId: string
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
      const { data: sessionData, error: sessionError } = await this.supabase
        .from('chat_sessions')
        .select('user_id')
        .eq('id', sessionId)
        .single();

      if (sessionError) {
        console.error(
          `‚ùå [MEMORY] Error getting user from session ${sessionId}:`,
          sessionError
        );
        return;
      }

      const userId = sessionData.user_id;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
      const containsBusinessInfo =
        /–∫–æ–º–ø–∞–Ω|–±–∏–∑–Ω–µ—Å|–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü|–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏|—Ñ–∏—Ä–º|—Ä–∞–±–æ—Ç–∞|—Å–∞–π—Ç|–º–∞–≥–∞–∑–∏–Ω|–±–∞–Ω–∫|—Ñ–∏–Ω–∞–Ω—Å|—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç|–æ—Ç—Ä–∞—Å–ª|–∏–Ω–¥—É—Å—Ç—Ä/i.test(
          messageContent
        );

      if (!containsBusinessInfo) {
        console.log(
          `‚ÑπÔ∏è [MEMORY] Message does not contain business information, skipping fact extraction`
        );
        return;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é GPT-4o-mini
      console.log(`‚ÑπÔ∏è [MEMORY] Analyzing message for business facts...`);

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ —Ñ–∞–∫—Ç—ã –æ –±–∏–∑–Ω–µ—Å–µ/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 

–ò–∑–≤–ª–µ–∫–∞–π —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
- business_type: —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
- business_location: —Å—Ç—Ä–∞–Ω–∞, —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
- business_size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–º–∞–ª—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –∫—Ä—É–ø–Ω—ã–π, —Å—Ç–∞—Ä—Ç–∞–ø –∏ —Ç.–¥.)
- business_digital_presence: –∫–∞–∫–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–≤–µ–±-—Å–∞–π—Ç, –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∏ —Ç.–¥.)
- business_sector: —Å–µ–∫—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ (B2B, B2C, –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ —Ç.–¥.)

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ —É–∫–∞–∂–∏ —Å—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1, –≥–¥–µ:
- 0.9-1.0: —Ñ–∞–∫—Ç —è–≤–Ω–æ –∏ –ø—Ä—è–º–æ —É–ø–æ–º—è–Ω—É—Ç
- 0.7-0.8: —Ñ–∞–∫—Ç —Å–∏–ª—å–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è
- 0.5-0.6: —Ñ–∞–∫—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ –≤–µ—Ä–µ–Ω, –Ω–æ –µ—Å—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
- < 0.5: —Å–ª–∏—à–∫–æ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –Ω–µ –≤–∫–ª—é—á–∞–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

–í–µ—Ä–Ω–∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
[
  {
    "fact_type": "—Ç–∏–ø_—Ñ–∞–∫—Ç–∞",
    "fact_value": "–∑–Ω–∞—á–µ–Ω–∏–µ",
    "confidence": —á–∏—Å–ª–æ_–æ—Ç_0_–¥–æ_1
  }
]

–ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é >= 0.5, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [].`,
          },
          {
            role: 'user',
            content: messageContent,
          },
        ],
        response_format: { type: 'json_object' },
        temperature: 0.1,
      });

      let extractedFacts: Array<{
        fact_type: string;
        fact_value: string;
        confidence: number;
      }> = [];

      try {
        const content =
          completion.choices[0].message.content || '{"facts": []}';
        const response = JSON.parse(content);
        extractedFacts = response.facts || [];
      } catch (e) {
        console.error('‚ùå [MEMORY] Error parsing fact extraction results:', e);
        return;
      }

      // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–∫—Ç—ã —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
      const validFacts = extractedFacts.filter(fact => fact.confidence >= 0.5);

      if (validFacts.length === 0) {
        console.log(
          `‚ÑπÔ∏è [MEMORY] No facts extracted with sufficient confidence`
        );
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
      console.log(`‚úÖ [MEMORY] Extracted ${validFacts.length} business facts`);

      for (const fact of validFacts) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π messageId –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ UUID
        await this.saveUserFact(
          userId,
          fact.fact_type,
          fact.fact_value,
          fact.confidence,
          messageId // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        );
      }
    } catch (e) {
      console.error('‚ùå [MEMORY] Error extracting facts from message:', e);
    }
  }
}
