import { SupabaseClient } from '@supabase/supabase-js';
import OpenAI from 'openai';
import { createEmbedding } from '../../services/openaiService.js';
import { 
  ChatMessage, 
  ChatSession, 
  RelevantMessage, 
  UserFact 
} from './types.js';
import { SessionManager } from './sessionManager.js';
import { MessageManager } from './messageManager.js';
import { FactManager } from './factManager.js';
import { SummaryManager } from './summaryManager.js';
import { v4 as uuidv4 } from 'uuid';
import { sendEscalationEmail } from '../../services/emailService.js';
import { openai } from '../../services/openaiService.js';

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
 */
export class ChatMemoryManager {
  private sessionManager!: SessionManager;
  private messageManager!: MessageManager;
  private factManager!: FactManager;
  private summaryManager!: SummaryManager;
  private initialized: boolean = false;

  constructor(
    private supabase: SupabaseClient | null = null,
    private openai: OpenAI | null = null
  ) {
    // –û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ initialize()
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞
   * @param supabase –ö–ª–∏–µ–Ω—Ç Supabase
   * @param openai –ö–ª–∏–µ–Ω—Ç OpenAI
   */
  initialize(supabase: SupabaseClient, openai: OpenAI): void {
    if (this.initialized) {
      console.warn('‚ö†Ô∏è [MEMORY] ChatMemoryManager already initialized');
      return;
    }

    this.supabase = supabase;
    this.openai = openai;

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.sessionManager = new SessionManager(this.supabase);
    this.messageManager = new MessageManager(this.supabase, this.openai);
    this.factManager = new FactManager(this.supabase, this.openai);

    // –°–æ–∑–¥–∞–µ–º SummaryManager –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É callback-—Ñ—É–Ω–∫—Ü–∏–∏
    this.summaryManager = new SummaryManager(
      this.supabase,
      this.openai,
      (sessionId: string) => this.getSessionMessages(sessionId),
      (embedding: number[], userId: string, limit?: number) => this.findSimilarMessages(embedding, userId, limit)
    );

    this.initialized = true;
    console.log('‚úÖ [MEMORY] ChatMemoryManager successfully initialized');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
   * @throws Error –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
   */
  private checkInitialized(): void {
    if (!this.initialized || !this.supabase || !this.openai) {
      const error = new Error('ChatMemoryManager not initialized. Please call initialize() first');
      console.error('‚ùå [MEMORY] ' + error.message);
      throw error;
    }
  }

  // === –°–ï–°–°–ò–ò ===

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async createSession(userId: string, metadata: any = {}): Promise<string> {
    this.checkInitialized();
    return this.sessionManager.createSession(userId, metadata);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @returns true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ false
   */
  async sessionExists(sessionId: string): Promise<boolean> {
    this.checkInitialized();
    return this.sessionManager.sessionExists(sessionId);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   */
  async updateSessionActivity(sessionId: string): Promise<void> {
    this.checkInitialized();
    await this.sessionManager.updateSessionActivity(sessionId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–∞–º–º–∞—Ä–∏
   */
  async getUserSessions(userId: string): Promise<ChatSession[]> {
    this.checkInitialized();
    return this.sessionManager.getUserSessions(userId);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   */
  async deleteSession(sessionId: string): Promise<void> {
    this.checkInitialized();
    await this.sessionManager.deleteSession(sessionId);
  }

  // === –°–û–û–ë–©–ï–ù–ò–Ø ===

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param content –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param role –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (user/assistant)
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param messageId –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
   * @returns ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async saveMessage(
    content: string,
    role: 'user' | 'assistant',
    sessionId: string,
    metadata: any = {},
    messageId?: string
  ): Promise<string> {
    this.checkInitialized();
    return this.messageManager.saveMessage(content, role, sessionId, metadata, messageId);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π "–≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞" –≤ –∏—Å—Ç–æ—Ä–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @param userQuestion –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param assistantResponse –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
   * @returns –ú–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö ID: [userMessageId, assistantMessageId]
   */
  async saveConversationPair(
    sessionId: string,
    userQuestion: string,
    assistantResponse: string,
    metadata: any = {}
  ): Promise<string[]> {
    this.checkInitialized();

    // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö ID
    const [userMessageId, assistantMessageId] = await this.messageManager.saveConversationPair(
      sessionId,
      userQuestion,
      assistantResponse,
      metadata
    );

    // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —ç—Å–∫–∞–ª–∞—Ü–∏–∏ –≤ –±–ª–æ–∫–µ try...catch, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
    try {
      const { data, error } = await this.supabase!.rpc('increment_session_message_count', {
        p_session_id: sessionId
      });

      if (error) {
        throw new Error(`RPC error: ${error.message}`);
      }
      
      const escalationResult = data && data[0];

      if (escalationResult?.should_escalate) {
        console.log(`[ChatMemoryManager] üî• –°–µ—Å—Å–∏—è ${sessionId} —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${escalationResult.current_message_count}`);
        
        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç
        sendEscalationEmail({
          sessionId: sessionId,
          messageCount: escalationResult.current_message_count,
          escalationTime: new Date().toUTCString()
        }).catch(err => {
            console.error(`[ChatMemoryManager] Error sending escalation email:`, err)
        });
      }

    } catch (e) {
      console.error(`[ChatMemoryManager] Error in escalation logic for session ${sessionId}:`, e);
    }
    
    // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return [userMessageId, assistantMessageId];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getSessionMessages(sessionId: string): Promise<ChatMessage[]> {
    this.checkInitialized();
    return this.messageManager.getSessionMessages(sessionId);
  }
  
  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param embedding –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param limit –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @returns –ú–∞—Å—Å–∏–≤ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async findSimilarMessages(
    embedding: number[],
    userId: string,
    limit: number = 5
  ): Promise<RelevantMessage[]> {
    this.checkInitialized();
    return this.messageManager.findSimilarMessages(embedding, userId, limit);
  }

  // === –§–ê–ö–¢–´ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï ===

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–∫—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param factType –¢–∏–ø —Ñ–∞–∫—Ç–∞
   * @param factValue –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞
   * @param confidence –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ñ–∞–∫—Ç–µ (0-1)
   * @param sourceMessageId ID —Å–æ–æ–±—â–µ–Ω–∏—è-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ñ–∞–∫—Ç–∞
   * @returns ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
   */
  async saveUserFact(
    userId: string,
    factType: string,
    factValue: string,
    confidence: number = 1,
    sourceMessageId: string = ''
  ): Promise<string> {
    this.checkInitialized();
    return this.factManager.saveUserFact(userId, factType, factValue, confidence, sourceMessageId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ —Ñ–∞–∫—Ç–æ–≤ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  async getUserFacts(userId: string): Promise<UserFact[]> {
    this.checkInitialized();
    return this.factManager.getUserFacts(userId);
  }

  // === –ö–û–ù–¢–ï–ö–°–¢ –ò –°–ê–ú–ú–ê–†–ò ===

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   */
  async updateSessionSummary(sessionId: string): Promise<void> {
    this.checkInitialized();
    await this.summaryManager.updateSessionSummary(sessionId);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param sessionId ID —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   * @param query –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT
   */
  async createContextForRequest(
    userId: string, 
    sessionId: string, 
    query: string
  ): Promise<string> {
    try {
      console.log(`üß† [MEMORY] Creating context for user ${userId}, session ${sessionId}`);
      
      // Get user facts
      const userFacts = await this.factManager.getUserFacts(userId);
      
      // Get recent messages from current session
      const recentMessages = await this.messageManager.getSessionMessages(sessionId);
      
      // Create query embedding for similarity search
      let queryEmbedding: number[] | null = null;
      try {
        queryEmbedding = await createEmbedding(query);
      } catch (embeddingError) {
        console.warn('‚ö†Ô∏è [MEMORY] Failed to create query embedding:', embeddingError);
      }
      
      // Find similar messages from other sessions
      let similarMessages: RelevantMessage[] = [];
      if (queryEmbedding) {
        similarMessages = await this.messageManager.findSimilarMessages(
          queryEmbedding, 
          userId, 
          3 // Limit to 3 most similar messages
        );
      }
      
      // Build context string
      let context = `User Context for ${userId}:\n\n`;
      
      // Add user facts
      if (userFacts.length > 0) {
        context += `Known Facts:\n`;
        userFacts.forEach(fact => {
          context += `- ${fact.fact_type}: ${fact.fact_value} (confidence: ${fact.confidence})\n`;
        });
        context += '\n';
      }
      
      // Add recent conversation
      if (recentMessages.length > 0) {
        context += `Recent Conversation:\n`;
        recentMessages.slice(-5).forEach(msg => {
          context += `${msg.role}: ${msg.content}\n`;
        });
        context += '\n';
      }
      
      // Add similar past conversations
      if (similarMessages.length > 0) {
        context += `Similar Past Conversations:\n`;
        similarMessages.forEach(msg => {
          context += `${msg.role}: ${msg.content} (similarity: ${msg.similarity.toFixed(2)})\n`;
        });
      }
      
      console.log(`‚úÖ [MEMORY] Context created (${context.length} characters)`);
      return context;
      
    } catch (error) {
      console.error('‚ùå [MEMORY] Error creating context:', error);
      return '';
    }
  }

  private async callSupabaseRPC(functionName: string, params: any): Promise<any> {
    try {
      const { data, error } = await this.supabase!.rpc(functionName, params);
      
      if (error) {
        throw new Error(`RPC error: ${error.message}`);
      }
      
      return data;
    } catch (error) {
      console.error(`‚ùå [MEMORY] Error calling RPC ${functionName}:`, error);
      throw error;
    }
  }
}

// –≠–∫–∑–µ–º–ø–ª—è—Ä-—Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const chatMemory = new ChatMemoryManager(); 