import { createEmbedding } from '../../src/services/openaiService.ts';
import { findRelevantChunks } from '../../src/services/supabaseService.ts';

async function testServices() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ï–†–í–ò–°–û–í...\n');
    
    // –¢–µ—Å—Ç 1: OpenAI Embedding
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI Embedding API...');
    try {
        const testText = "–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?";
        console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "${testText}"`);
        
        const embedding = await createEmbedding(testText);
        
        console.log(`   ‚úÖ Embedding –ø–æ–ª—É—á–µ–Ω! –†–∞–∑–º–µ—Ä: ${embedding.length}`);
        console.log(`   üìä –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: [${embedding.slice(0, 5).map(x => x.toFixed(4)).join(', ')}...]`);
        
        // –¢–µ—Å—Ç 2: Supabase –ø–æ–∏—Å–∫
        console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase –ø–æ–∏—Å–∫...');
        console.log('   üì§ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
        
        const chunks = await findRelevantChunks(
            embedding,     // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π embedding
            'eaa',         // dataset_id
            0.75,          // similarity_threshold
            3              // max_chunks
        );
        
        console.log(`   ‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: ${chunks.length}`);
        
        if (chunks.length > 0) {
            console.log('   üìö –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —á–∞–Ω–∫:');
            console.log(`      - ID: ${chunks[0].id || 'N/A'}`); 
            console.log(`      - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${chunks[0].content?.substring(0, 100) || 'N/A'}...`);
            console.log(`      - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${chunks[0].similarity || 'N/A'}`);
        } else {
            console.log('   ‚ö†Ô∏è –ß–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—É—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)');
        }
        
        console.log('\nüéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
        console.log('üîß –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ OpenAI –∏–ª–∏ Supabase API');
        console.log('üîç –ù—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ...');
        
    } catch (embeddingError) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –í OpenAI Embedding API:');
        console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', embeddingError.name);
        console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', embeddingError.message);
        console.error('   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', embeddingError);
        
        if (embeddingError.message?.includes('API key')) {
            console.error('\nüîë –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π OPENAI_API_KEY');
            console.error('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ');
        }
        
        if (embeddingError.message?.includes('quota')) {
            console.error('\nüí≥ –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI API');
            console.error('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã –≤ –∞–∫–∫–∞—É–Ω—Ç–µ OpenAI');
        }
        
        return; // –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ embedding –Ω–µ –º–æ–∂–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Supabase
    }
    
    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å Supabase
    try {
        console.log('\n‚ö†Ô∏è OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º Supabase —Å —Ç–µ—Å—Ç–æ–≤—ã–º embedding...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π embedding –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase
        const testEmbedding = new Array(1536).fill(0.1); // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è text-embedding-ada-002
        
        const chunks = await findRelevantChunks(
            testEmbedding,
            'eaa',
            0.75,
            3
        );
        
        console.log(`   ‚úÖ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ: ${chunks.length} —á–∞–Ω–∫–æ–≤`);
        
    } catch (supabaseError) {
        console.error('\n‚ùå –û–®–ò–ë–ö–ê –í Supabase:');
        console.error('   –¢–∏–ø –æ—à–∏–±–∫–∏:', supabaseError.name);
        console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', supabaseError.message);
        console.error('   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', supabaseError);
        
        if (supabaseError.message?.includes('match_documents')) {
            console.error('\nüóÑÔ∏è –ü–†–û–ë–õ–ï–ú–ê: –§—É–Ω–∫—Ü–∏—è match_documents –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Supabase');
            console.error('   –†–µ—à–µ–Ω–∏–µ: –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å SQL —Ñ—É–Ω–∫—Ü–∏—é match_documents –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        if (supabaseError.message?.includes('authentication')) {
            console.error('\nüîë –ü–†–û–ë–õ–ï–ú–ê: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase');
            console.error('   –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å SUPABASE_URL –∏ SUPABASE_SERVICE_KEY –≤ .env —Ñ–∞–π–ª–µ');
        }
    }
}

testServices().catch(console.error); 