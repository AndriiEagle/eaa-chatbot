const API_URL = 'http://localhost:3000/api/v1';

async function testMultiMode() {
    console.log('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ñ–ò–ú–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –í–û–ü–†–û–°–û–í...\n');
    
    try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å multi-—Ä–µ–∂–∏–º
        const complexQuestions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ EAA?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ European Accessibility Act?", 
            "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤?",
            "–ö–∞–∫–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ EAA –∏ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ?"
        ];
        
        for (let i = 0; i < complexQuestions.length; i++) {
            const question = complexQuestions[i];
            console.log(`\n${i + 1}Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú: "${question}"`);
            console.log('=' .repeat(60));
            
            const requestBody = {
                question: question,
                user_id: "multi-test-user",
                session_id: "multi-test-session",
                dataset_id: "eaa",
                similarity_threshold: 0.75,
                max_chunks: 3
            };
            
            const startTime = Date.now();
            const response = await fetch(`${API_URL}/ask`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });
            const responseTime = Date.now() - startTime;
            
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
            console.log(`üìä HTTP —Å—Ç–∞—Ç—É—Å: ${response.status}`);
            
            if (!response.ok) {
                const errorText = await response.text();
                console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                console.error(`‚ùå –û—Ç–≤–µ—Ç: ${errorText}`);
                continue;
            }
            
            const data = await response.json();
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            if (data.multi) {
                console.log(`üîÄ MULTI-–†–ï–ñ–ò–ú: ${data.answers?.length || 0} –≤–æ–ø—Ä–æ—Å–æ–≤`);
                
                if (data.answers) {
                    data.answers.forEach((answer, idx) => {
                        console.log(`\n   üìù –í–æ–ø—Ä–æ—Å ${idx + 1}: ${answer.question}`);
                        console.log(`   üí¨ –û—Ç–≤–µ—Ç: ${answer.answer.substring(0, 80)}...`);
                        console.log(`   üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${answer.sources?.length || 0}`);
                        console.log(`   ‚ö° Performance: emb=${answer.performance?.embedding_ms}ms, search=${answer.performance?.search_ms}ms, gen=${answer.performance?.generate_ms}ms`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É
                        if (answer.answer.includes('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞')) {
                            console.log(`   ‚ùå –û–®–ò–ë–ö–ê –í –û–¢–í–ï–¢–ï!`);
                        }
                    });
                }
            } else {
                console.log(`üìù SINGLE-–†–ï–ñ–ò–ú`);
                console.log(`üí¨ –û—Ç–≤–µ—Ç: ${data.answer?.substring(0, 80)}...`);
                console.log(`üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: ${data.sources?.length || 0}`);
                console.log(`üîç –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ: ${data.needs_clarification}`);
            }
            
            console.log(`üéØ –ü–æ–¥—Å–∫–∞–∑–∫–∏: ${data.clarificationQuestions?.length || 0}`);
            console.log(`üìã –®–∞–±–ª–æ–Ω—ã: ${data.infoTemplates?.length || 0}`);
        }
        
        console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
        
    } catch (error) {
        console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    }
}

testMultiMode(); 