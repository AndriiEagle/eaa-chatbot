const API_URL = 'http://localhost:3000/api/v1';

async function detailedDebugTest() {
    console.log('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê API...\n');
    
    try {
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π health check...');
        const healthResponse = await fetch(`${API_URL}/health`);
        const healthData = await healthResponse.json();
        console.log('‚úÖ Health OK:', healthData.status);
        
        console.log('\n2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...');
        
        const simpleAskBody = {
            question: "EAA",
            user_id: "debug-user",
            session_id: "debug-session",
            dataset_id: "eaa",
            similarity_threshold: 0.75,
            max_chunks: 3
        };
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:', JSON.stringify(simpleAskBody, null, 2));
        
        const startTime = Date.now();
        const askResponse = await fetch(`${API_URL}/ask`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(simpleAskBody)
        });
        const responseTime = Date.now() - startTime;
        
        console.log(`\nüìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${askResponse.status}`);
        console.log('üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:');
        askResponse.headers.forEach((value, key) => {
            console.log(`   ${key}: ${value}`);
        });
        
        if (!askResponse.ok) {
            const errorText = await askResponse.text();
            console.error('\n‚ùå HTTP ERROR:');
            console.error('Status:', askResponse.status);
            console.error('Response:', errorText);
            return;
        }
        
        const askData = await askResponse.json();
        console.log('\nüì® –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:');
        console.log(JSON.stringify(askData, null, 2));
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        console.log('\nüîç –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê:');
        console.log(`- Multi-—Ä–µ–∂–∏–º: ${askData.multi}`);
        console.log(`- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ answers: ${askData.answers?.length || 0}`);
        console.log(`- Performance total: ${askData.performance?.total_ms}ms`);
        
        if (askData.answers) {
            askData.answers.forEach((answer, index) => {
                console.log(`\nüìù ANSWER ${index + 1}:`);
                console.log(`   Question: ${answer.question}`);
                console.log(`   Answer: ${answer.answer.substring(0, 100)}...`);
                console.log(`   Sources: ${answer.sources?.length || 0}`);
                console.log(`   Performance: emb=${answer.performance?.embedding_ms}ms, search=${answer.performance?.search_ms}ms, gen=${answer.performance?.generate_ms}ms`);
            });
        }
        
        console.log('\nüéØ –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"');
        console.log('üîß –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ!');
        
    } catch (error) {
        console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï:', error);
    }
}

detailedDebugTest(); 