/**
 * üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–†–£–°–¢–†–ê–¶–ò–ò
 * 
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
 */

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ fetch
if (typeof fetch === 'undefined') {
  console.error('‚ùå Fetch –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ Node.js. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Node.js 18+ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ node-fetch');
  process.exit(1);
}

const QUICK_FRUSTRATION_SCENARIO = [
  "–ü–æ–º–æ–≥–∏—Ç–µ —Å European Accessibility Act",
  "–í–∞—à –æ—Ç–≤–µ—Ç –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω, –º–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!",
  "Damn it! –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ–æ–±—â–µ!",
  "Shit! –ü–æ—á–µ–º—É —ç—Ç–æ—Ç –±–æ—Ç —Ç–∞–∫–æ–π –ø–ª–æ—Ö–æ–π?!",
  "Fuck this! –Ø –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!"
];

async function runQuickTest() {
  console.log('üé≠ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏...\n');
  
  const baseUrl = 'http://localhost:3001';
  const sessionId = `quick-test-${Date.now()}`;
  const userId = `user-${Date.now()}`;
  
  console.log(`üìã Session ID: ${sessionId}`);
  console.log(`üë§ User ID: ${userId}\n`);
  
  for (let i = 0; i < QUICK_FRUSTRATION_SCENARIO.length; i++) {
    const message = QUICK_FRUSTRATION_SCENARIO[i];
    
    console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ ${i + 1}: "${message}"`);
    
    try {
      const response = await fetch(`${baseUrl}/api/v1/ask`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          question: message,
          user_id: userId,
          session_id: sessionId,
          stream: false
        })
      });
      
      if (response.ok) {
        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (${response.status})`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ (${response.status})`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
  
  console.log('\nüèÅ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏');
  console.log(`üîç Session ID –¥–ª—è –ø–æ–∏—Å–∫–∞: ${sessionId}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runQuickTest().catch(console.error); 