import { v4 as uuidv4 } from 'uuid';
import { TimerMeasure, EnhancedResponse } from '../../types/common.js';
import { chatMemory } from '../memory/index.js';
import { UserFact } from '../memory/types.js';
import { openai } from '../../services/openaiService.js';
import { createEmbedding } from '../../services/openaiService.js';
import { findRelevantChunks } from '../../services/supabaseService.js';
import { CHAT_MODEL } from '../../config/environment.js';
import { STRICT_SYSTEM_PROMPT } from '../../config/prompts.js';
import { formatRAGContext, formatSourcesMetadata } from '../formatting/formatters.js';
import { Timer, createPerformanceMetrics } from '../metrics/timers.js';
import { ChatCompletionMessageParam } from 'openai/resources/chat/completions';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞–ª–∏—á–∏—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
 */
export function containsBusinessInfo(message: string): boolean {
  if (!message || typeof message !== 'string') return false;
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
  if (message.includes('?')) return false;
  
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–Ω–µ–µ 5 —Å–ª–æ–≤)
  const wordCount = message.split(/\s+/).filter(Boolean).length;
  if (wordCount < 5) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ –±–∏–∑–Ω–µ—Å–µ
  const businessWords = [
    '–∫–æ–º–ø–∞–Ω–∏—è', '–±–∏–∑–Ω–µ—Å', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '—Ñ–∏—Ä–º–∞', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 
    '–º–∞–≥–∞–∑–∏–Ω', '—Å–∞–π—Ç', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å—Ç–∞—Ä—Ç–∞–ø', '–ø—Ä–æ–µ–∫—Ç',
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '—Ä–∞–±–æ—Ç–∞—é', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–ò–ü',
    '–∑–∞–Ω–∏–º–∞–µ–º—Å—è', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º', '–ø—Ä–æ–¥–∞–µ–º', '–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏',
    '–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è', '–º–æ–π –±–∏–∑–Ω–µ—Å', '–º–æ—è –∫–æ–º–ø–∞–Ω–∏—è', '–Ω–∞—à –±–∏–∑–Ω–µ—Å',
    '—è –≤–ª–∞–¥–µ–ª–µ—Ü', '—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—è –¥–∏—Ä–µ–∫—Ç–æ—Ä', '–º—ã –ø—Ä–æ–¥–∞–µ–º'
  ];
  
  const locationWords = [
    '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤', '–±–∞–∑–∏—Ä—É–µ—Ç—Å—è', '—Ä–∞–±–æ—Ç–∞–µ—Ç –≤', 
    '–∏–∑ –†–æ—Å—Å–∏–∏', '–∏–∑ –ì–µ—Ä–º–∞–Ω–∏–∏', '–∏–∑ –§—Ä–∞–Ω—Ü–∏–∏', '–∏–∑ –ò—Ç–∞–ª–∏–∏',
    '–≤ –ï–≤—Ä–æ–ø–µ', '–≤ –ï–≤—Ä–æ—Å–æ—é–∑–µ', '–≤ –ï–°'
  ];
  
  const sizeWords = [
    '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', '—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤', '—á–µ–ª–æ–≤–µ–∫ –≤ —à—Ç–∞—Ç–µ', '–Ω–µ–±–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
    '–º–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '—Å—Ä–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è', '–∫—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
  ];
  
  const digitalWords = [
    '—Å–∞–π—Ç', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–≤–µ–±-—Å–∞–π—Ç',
    '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', '–≤–µ–±-–ø–æ—Ä—Ç–∞–ª'
  ];
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Å—Å–∏–≤—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const allKeywords = [...businessWords, ...locationWords, ...sizeWords, ...digitalWords];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
  return allKeywords.some(word => message.toLowerCase().includes(word.toLowerCase()));
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
interface BusinessInfoParams {
  question: string;
  user_id: string;
  session_id: string;
  dataset_id: string;
  similarity_threshold: number;
  max_chunks: number;
  isFirstInteraction: boolean;
  timerTotal: Timer;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
 * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * @returns {Promise<EnhancedResponse>} –û–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
export async function processBusinessInfo(params: BusinessInfoParams): Promise<EnhancedResponse> {
  console.log('üîç [BUSINESS PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
  let messageId: string;
  try {
    messageId = await chatMemory.saveMessage(
      params.question,
      'user',
      params.session_id,
      { timestamp: new Date().toISOString() }
    );
    console.log(`‚úÖ [BUSINESS PROCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${messageId}`);
  } catch (error) {
    console.error('‚ùå Error saving user message to chat history:', error);
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π ID –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    messageId = uuidv4();
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –æ –±–∏–∑–Ω–µ—Å–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const factExtractionPrompt = `
    –¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã –æ –µ–≥–æ –±–∏–∑–Ω–µ—Å–µ. 
    –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - —Å—Ç—Ä–æ–≥–æ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: 
    {
      "facts": [
        {
          "fact_type": "—Ç–∏–ø_—Ñ–∞–∫—Ç–∞", // business_type, business_location, business_size, business_digital_presence
          "fact_value": "–∑–Ω–∞—á–µ–Ω–∏–µ",
          "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1 // —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞
        }
      ]
    }
    
    –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${params.question}"
  `;
  
  const factExtraction = await openai.chat.completions.create({
    model: 'gpt-3.5-turbo',
    messages: [{ role: 'user', content: factExtractionPrompt }] as ChatCompletionMessageParam[],
    temperature: 0,
    response_format: { type: 'json_object' }
  });
  
  let facts = [];
  try {
    const response = JSON.parse(factExtraction.choices[0].message.content || '{}');
    facts = response.facts || [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    for (const fact of facts) {
      if (fact.confidence > 0.7) {
        await chatMemory.saveUserFact(
          params.user_id,
          fact.fact_type,
          fact.fact_value,
          fact.confidence,
          messageId // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ
        );
      }
    }
    
    console.log(`‚úÖ [FACTS] –ò–∑–≤–ª–µ—á–µ–Ω–æ ${facts.length} —Ñ–∞–∫—Ç–æ–≤ –æ –±–∏–∑–Ω–µ—Å–µ`);
  } catch (e) {
    console.error('‚ùå [FACTS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤:', e);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const updatedFacts = await chatMemory.getUserFacts(params.user_id);
  const highConfidenceBusinessFacts = updatedFacts.filter(
    (f: UserFact) => f.fact_type.startsWith('business_') && f.confidence > 0.7
  );
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
  const businessType = highConfidenceBusinessFacts.find((f: UserFact) => f.fact_type === 'business_type')?.fact_value;
  const businessLocation = highConfidenceBusinessFacts.find((f: UserFact) => f.fact_type === 'business_location')?.fact_value;
  
  // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ
  let searchQuery = '';
  if (businessType && businessLocation) {
    searchQuery = `${businessType} ${businessLocation} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞`;
  } else if (businessType) {
    searchQuery = `${businessType} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞`;
  } else if (businessLocation) {
    searchQuery = `${businessLocation} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞`;
  } else {
    searchQuery = '–æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è EAA –¥–ª—è –±–∏–∑–Ω–µ—Å–∞';
  }
  
  // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
  const embedding = await createEmbedding(searchQuery);
  const chunks = await findRelevantChunks(
    embedding, 
    params.dataset_id, 
    params.similarity_threshold, 
    params.max_chunks
  );
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —á–∞–Ω–∫–∞–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
  const context = formatRAGContext(chunks, 
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: "${params.question}". 
    ${highConfidenceBusinessFacts.length > 0 ? 
      `–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –±–∏–∑–Ω–µ—Å–µ: ${highConfidenceBusinessFacts.map((f: UserFact) => `${f.fact_type.replace('business_', '')}: ${f.fact_value}`).join(', ')}` : 
      '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –±–∏–∑–Ω–µ—Å–µ. –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ –æ–±—â–µ–º –≤–∏–¥–µ.'
    }
    –û—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–≤ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –ø–æ–Ω—è–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –±–∏–∑–Ω–µ—Å–µ.
    –ó–∞—Ç–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è European Accessibility Act (EAA) –º–æ–≥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –µ–≥–æ —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
    –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.`
  );
  
  // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
  const messages: ChatCompletionMessageParam[] = [
    { role: 'system', content: STRICT_SYSTEM_PROMPT },
    { role: 'user', content: context }
  ];
  
  const completion = await openai.chat.completions.create({
    model: CHAT_MODEL,
    messages,
    temperature: 0.1
  });
  
  const answer = completion.choices[0].message.content || '';
  const sources = formatSourcesMetadata(chunks);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
  try {
    await chatMemory.saveMessage(
      params.question,
      'user',
      params.session_id,
      { timestamp: new Date().toISOString() }
    );
  } catch (error) {
    console.error('‚ùå Error saving user message to chat history:', error);
  }
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
  return {
    answer,
    sources,
    no_results: chunks.length === 0,
    performance: createPerformanceMetrics({
      total: params.timerTotal
    }),
    needs_clarification: false
  };
} 