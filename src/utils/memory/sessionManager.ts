import { ChatSession } from './types.js';
import { SupabaseClient } from '@supabase/supabase-js';
import { v4 as uuidv4 } from 'uuid';
import { supabase } from '../../services/supabaseService.js';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ —á–∞—Ç–∞
 */
export class SessionManager {
  constructor(private supabase: SupabaseClient) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async createSession(userId: string, metadata: any = {}): Promise<string> {
    if (!userId || typeof userId !== 'string') {
      throw new Error('Missing user ID for session creation');
    }

    try {
      console.log(`üìù [SESSION] Creating new session for user: ${userId}`);
      
      const sessionId = uuidv4();
      const now = new Date().toISOString();
      
      const { data, error } = await this.supabase
        .from('chat_sessions')
        .insert({
          id: sessionId,
          user_id: userId,
          created_at: now,
          last_activity: now,
          metadata: metadata || {}
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå [SESSION] Database error:', error);
        throw new Error(`Error creating session: ${error.message}`);
      }

      console.log(`‚úÖ [SESSION] Session created successfully: ${sessionId}`);
      return sessionId;

    } catch (error) {
      console.error('‚ùå [SESSION] Error in createSession:', error);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID
   * @param sessionId –ó–∞–¥–∞–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  async createSessionWithId(sessionId: string, userId: string, metadata: any = {}): Promise<string> {
    if (!userId || typeof userId !== 'string') {
      throw new Error('Missing user ID for session creation');
    }
    if (!sessionId || typeof sessionId !== 'string') {
      throw new Error('Missing session ID for session creation');
    }

    try {
      console.log(`üìù [SESSION] Creating session with ID ${sessionId} for user: ${userId}`);
      
      const now = new Date().toISOString();
      
      const { data, error } = await this.supabase
        .from('chat_sessions')
        .insert({
          id: sessionId,
          user_id: userId,
          created_at: now,
          last_activity: now,
          metadata: metadata || {}
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå [SESSION] Database error:', error);
        throw new Error(`Error creating session: ${error.message}`);
      }

      console.log(`‚úÖ [SESSION] Session created successfully with ID: ${sessionId}`);
      return sessionId;

    } catch (error) {
      console.error('‚ùå [SESSION] Error in createSessionWithId:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @returns true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ false
   */
  async sessionExists(sessionId: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data, error, count } = await this.supabase
        .from('chat_sessions')
        .select('*', { count: 'exact', head: true })
        .eq('id', sessionId);

      if (error) {
        console.error(`‚ùå [MEMORY] Error checking session existence ${sessionId}:`, error);
        return false;
      }

      return count !== null && count > 0;
    } catch (e) {
      console.error(`‚ùå [MEMORY] Exception checking session existence ${sessionId}:`, e);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   */
  async updateSessionActivity(sessionId: string): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const { error } = await this.supabase
        .from('chat_sessions')
        .update({ last_activity: new Date().toISOString() })
        .eq('id', sessionId);

      if (error) {
        console.error(`‚ùå [MEMORY] Error updating session activity ${sessionId}:`, error);
      }
    } catch (e) {
      console.error(`‚ùå [MEMORY] Exception updating session activity ${sessionId}:`, e);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ú–∞—Å—Å–∏–≤ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserSessions(userId: string): Promise<ChatSession[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const { data: sessions, error: sessionsError } = await this.supabase
        .from('chat_sessions')
        .select('*, chat_summaries(*)')
        .eq('user_id', userId)
        .order('last_activity', { ascending: false });

      if (sessionsError) {
        console.error(`‚ùå [MEMORY] Error getting user sessions ${userId}:`, sessionsError);
        return [];
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return sessions.map(session => ({
        id: session.id,
        user_id: session.user_id,
        created_at: session.created_at,
        last_activity: session.last_activity,
        metadata: session.metadata || {},
        summary: session.chat_summaries?.[0]?.summary || null,
        key_topics: session.chat_summaries?.[0]?.key_topics || [],
        business_info: session.chat_summaries?.[0]?.business_info || {}
      }));
    } catch (e) {
      console.error(`‚ùå [MEMORY] Exception getting user sessions ${userId}:`, e);
      return [];
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   */
  async deleteSession(sessionId: string): Promise<void> {
    try {
      console.log(`üóëÔ∏è [SESSION] Deleting session: ${sessionId}`);

      // First delete related messages
      const { error: messagesError } = await this.supabase
        .from('chat_messages')
        .delete()
        .eq('session_id', sessionId);

      if (messagesError) {
        console.warn('‚ö†Ô∏è [SESSION] Error deleting messages:', messagesError);
      }

      // Then delete the session
      const { error: sessionError } = await this.supabase
        .from('chat_sessions')
        .delete()
        .eq('id', sessionId);

      if (sessionError) {
        console.error('‚ùå [SESSION] Error deleting session:', sessionError);
        throw new Error(`Error deleting session: ${sessionError.message}`);
      }

      console.log(`‚úÖ [SESSION] Session deleted successfully: ${sessionId}`);

    } catch (error) {
      console.error('‚ùå [SESSION] Error in deleteSession:', error);
      throw error;
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç)
 * @param sessionId ID —Å–µ—Å—Å–∏–∏
 * @returns true –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ false
 */
export async function checkSessionExists(sessionId: string): Promise<boolean> {
  try {
    console.log(`üîç [SESSION] Checking existence of session: ${sessionId}`);
    
    const { data, error } = await supabase
      .from('chat_sessions')
      .select('id')
      .eq('id', sessionId)
      .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle() –≤–º–µ—Å—Ç–æ single()
    
    if (error) {
      console.error(`‚ùå [SESSION] Error checking session ${sessionId}:`, error);
      return false;
    }
    
    const exists = !!data;
    console.log(`‚úÖ [SESSION] Session ${sessionId} exists: ${exists}`);
    return exists;
    
  } catch (error) {
    console.error(`‚ùå [SESSION] Exception checking session ${sessionId}:`, error);
    return false;
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID (—Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç)
 * @param sessionId –ó–∞–¥–∞–Ω–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
 * @returns ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export async function createSessionWithId(sessionId: string, userId: string, metadata: any = {}): Promise<string> {
  try {
    console.log(`üìù [SESSION] Creating session with ID ${sessionId} for user: ${userId}`);
    
    const now = new Date().toISOString();
    
    const { data, error } = await supabase
      .from('chat_sessions')
      .insert({
        id: sessionId,
        user_id: userId,
        created_at: now,
        last_activity: now,
        metadata: metadata || {}
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå [SESSION] Database error:', error);
      throw new Error(`Error creating session: ${error.message}`);
    }

    console.log(`‚úÖ [SESSION] Session created successfully with ID: ${sessionId}`);
    return sessionId;

  } catch (error) {
    console.error('‚ùå [SESSION] Error in createSessionWithId:', error);
    throw error;
  }
} 