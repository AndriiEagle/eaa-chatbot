import { ChatMessage, RelevantMessage } from './types.js';
import { SupabaseClient } from '@supabase/supabase-js';
import { OpenAI } from 'openai';
import { createEmbedding } from '../../services/openaiService.js';
import { v4 as uuidv4 } from 'uuid';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–∞—Ç–∞
 */
export class MessageManager {
  constructor(
    private supabase: SupabaseClient,
    private openai: OpenAI
  ) {}
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param content –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param role –†–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (user/assistant)
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @param metadata –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param messageId –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
   * @returns ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async saveMessage(
    content: string,
    role: 'user' | 'assistant',
    sessionId: string,
    metadata: any = {},
    messageId?: string
  ): Promise<string> {
    try {
      // Validate required parameters
      if (!content || !role || !sessionId) {
        console.error('‚ùå [MESSAGES] Missing required parameters for saving message');
        throw new Error('Missing required parameters for saving message');
      }

      const id = messageId || uuidv4();
      const timestamp = new Date().toISOString();

      // Create embedding for the message content
      let embedding: number[] | null = null;
      try {
        embedding = await createEmbedding(content);
        console.log(`üß† [MESSAGES] Created embedding for message (${embedding.length} dimensions)`);
      } catch (embeddingError) {
        console.warn('‚ö†Ô∏è [MESSAGES] Failed to create embedding for message:', embeddingError);
      }

      // Save message to database
      const { error } = await this.supabase
        .from('chat_messages')
        .insert({
          id,
          session_id: sessionId,
          role,
          content,
          created_at: timestamp,
          metadata: metadata || {},
          embedding
        });

      if (error) {
        console.error('‚ùå [MESSAGES] Error saving message:', error);
        throw new Error(`Error saving message: ${error.message}`);
      }

      console.log(`‚úÖ [MESSAGES] Message saved successfully: ${id}`);
      return id;

    } catch (error) {
      console.error('‚ùå [MESSAGES] Error in saveMessage:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getSessionMessages(sessionId: string): Promise<ChatMessage[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ä—Ç–∏—Ä—É—è –∏—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
      const { data, error } = await this.supabase
        .from('chat_messages')
        .select('*')
        .eq('session_id', sessionId)
        .order('created_at', { ascending: true });

      if (error) {
        console.error(`‚ùå [MEMORY] Error getting session messages ${sessionId}:`, error);
        return [];
      }

      return data as ChatMessage[];
    } catch (e) {
      console.error(`‚ùå [MEMORY] Exception getting session messages ${sessionId}:`, e);
      return [];
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param embedding –≠–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param limit –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @param threshold –ü–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ (0-1)
   * @returns –ú–∞—Å—Å–∏–≤ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async findSimilarMessages(
    embedding: number[],
    userId: string,
    limit: number = 5,
    threshold: number = 0.7
  ): Promise<RelevantMessage[]> {
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è match_chat_messages
      const { data, error } = await this.supabase.rpc('match_chat_messages', {
        query_embedding: embedding,
        user_id: userId,
        similarity_threshold: threshold,
        match_count: limit
      });

      if (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É PGRST202, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç
        if (error.code === 'PGRST202') {
          console.error('‚ùå [MEMORY] PGRST202 Error: match_chat_messages function not found or invalid parameters. Check function name and definition in DB.', error);
        } else {
          console.error('‚ùå [MEMORY] Error in vector search for messages (match_chat_messages):', error);
        }
        return [];
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      return (data || []).map((m: any) => ({
        id: m.id,
        session_id: m.session_id,
        content: m.content,
        role: m.role,
        created_at: m.created_at,
        similarity: m.similarity
      }));
    } catch (e) {
      console.error('‚ùå [MEMORY] Exception searching similar messages:', e);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—É –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param sessionId ID —Å–µ—Å—Å–∏–∏
   * @param userQuestion –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param assistantResponse –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
   * @param metadata –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
   * @returns –ú–∞—Å—Å–∏–≤ ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π [userMessageId, assistantMessageId]
   * @throws –û—à–∏–±–∫–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏
   */
  async saveConversationPair(
    sessionId: string,
    userQuestion: string,
    assistantResponse: string,
    metadata: Record<string, any> = {}
  ): Promise<[string, string]> {
    try {
      // Validate required parameters
      if (!sessionId) {
        throw new Error('‚ùå [MEMORY] Session ID not specified when saving conversation');
      }

      if (!userQuestion || !assistantResponse) {
        throw new Error('‚ùå [MEMORY] User question or assistant response is empty');
      }

      console.log(`üí¨ [MEMORY] Saving conversation pair for session: ${sessionId}`);

      // Save user message
      const userMessageId = await this.saveMessage(
        userQuestion,
        'user',
        sessionId,
        { ...metadata, type: 'user_question' }
      );

      // Save assistant message
      const assistantMessageId = await this.saveMessage(
        assistantResponse,
        'assistant',
        sessionId,
        { ...metadata, type: 'assistant_response' }
      );

      console.log(`‚úÖ [MEMORY] Conversation pair saved successfully`);
      return [userMessageId, assistantMessageId];

    } catch (error) {
      console.error('‚ùå [MEMORY] Error saving conversation pair:', error);
      throw error;
    }
  }
} 