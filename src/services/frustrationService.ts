import { FrustrationDetectionAgent } from './frustrationDetectionAgent.js';
import { EmailComposerAgent } from './emailComposerAgent.js';
import { chatMemory } from '../utils/memory/index.js';
import { logger } from '../utils/logger.js';

/**
 * üéØ FRUSTRATION SERVICE
 * 
 * Handles frustration detection and escalation.
 * Single responsibility: User frustration management.
 */
export class FrustrationService {
  private frustrationAgent: FrustrationDetectionAgent;
  private emailComposer: EmailComposerAgent;

  constructor() {
    this.frustrationAgent = new FrustrationDetectionAgent();
    this.emailComposer = new EmailComposerAgent();
  }

  async analyzeAndHandle(userId: string, sessionId: string, question: string, answer: string): Promise<string | null> {
    logger.info('Analyzing frustration', { userId, sessionId });

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      console.log(`üìö [FrustrationAgent] Loading context for session ${sessionId}`);
      const sessionMessages = await chatMemory.getSessionMessages(sessionId);
      console.log(`üìö [FrustrationAgent] Loaded ${sessionMessages.length} recent messages`);

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
      if (sessionMessages.length === 0) {
        console.log(`‚ö†Ô∏è [FrustrationAgent] No recent messages found, this might be first message in session`);
      }

      const contextSummary = sessionMessages.map(msg => `${msg.role}: ${msg.content.substring(0, 50)}...`).join('; ');
      console.log(`üìù [FrustrationAgent] Context summary: ${contextSummary}`);
      
      // Call with correct signature: (currentMessage, recentMessages, sessionId, userId)
      const frustrationResult = await this.frustrationAgent.analyzeFrustration(
        question, 
        sessionMessages as any[], 
        sessionId, 
        userId
      );
      
      if (frustrationResult.shouldEscalate) {
        return await this.handleEscalation(userId, sessionId, question, answer, frustrationResult);
      }
      
      return null; // No escalation needed
    } catch (error) {
      logger.error('Error in frustration analysis', { error, userId, sessionId });
      return null;
    }
  }

  private async handleEscalation(
    userId: string, 
    sessionId: string, 
    question: string, 
    answer: string, 
    frustrationResult: any
  ): Promise<string> {
    logger.warn('High frustration detected - escalating', { 
      userId, 
      sessionId, 
      frustrationLevel: frustrationResult.frustrationLevel 
    });
    
    try {
      // Get user context for email
      const [userFacts, recentMessages] = await Promise.all([
        chatMemory.getUserFacts(userId),
        chatMemory.getSessionMessages(sessionId)
      ]);
      
      // Use the correct generateEmail method with proper context
      const emailDraft = await this.emailComposer.generateEmail({
        userId,
        sessionId,
        frustrationAnalysis: frustrationResult,
        userFacts: userFacts as any[],
        recentMessages: recentMessages as any[]
      });

      logger.info('Frustration escalation email generated successfully', { 
        userId, 
        sessionId,
        subject: emailDraft.subject 
      });

      // üéØ RETURN NOTIFICATION MESSAGE FOR USER
      return `
üö® **–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!**

–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.

üìß **–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:**
‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ
‚Ä¢ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É

‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –æ–±—ã—á–Ω–æ 2-4 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

–ê –ø–æ–∫–∞ —è –ø—Ä–æ–¥–æ–ª–∂—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!
      `.trim();
      
    } catch (error) {
      logger.error('Error in frustration escalation', { error, userId, sessionId });
      return `
üö® **–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É!**

–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É. –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏.
      `.trim();
    }
  }
} 