import { Request, Response } from 'express';
import OpenAI from 'openai';
import formidable, { Fields, Files } from 'formidable';
import fs from 'fs';
import ffmpeg from 'fluent-ffmpeg';
import path from 'path';
import os from 'os';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
const convertToWav = (inputPath: string, outputPath: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    ffmpeg(inputPath)
      .toFormat('wav')
      .on('end', () => {
        console.log('üîÑ [Whisper] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        resolve();
      })
      .on('error', (err) => {
        console.error('‚ùå [Whisper] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', err);
        reject(err);
      })
      .save(outputPath);
  });
};

export const transcribeAudio = async (req: Request, res: Response) => {
  console.log('üé§ [Whisper] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é');

  const form = formidable({});

  form.parse(req, async (err: Error | null, fields: Fields, files: Files) => {
    if (err) {
      console.error('‚ùå [Whisper] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–º—ã:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.', details: err.message });
    }

    const audioFile = files.audio;

    if (!audioFile || !Array.isArray(audioFile) || audioFile.length === 0) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ.' });
    }

    const file = audioFile[0];
    const originalFilePath = file.filepath;
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è WAV —Ñ–∞–π–ª–∞
    const tempDir = os.tmpdir();
    const uniqueId = Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    const wavFilePath = path.join(tempDir, `whisper_${uniqueId}.wav`);

    try {
      console.log(`üîä [Whisper] –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: ${file.originalFilename}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`);
      console.log(`üìÅ [Whisper] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: ${originalFilePath}`);
      console.log(`üìÅ [Whisper] WAV —Ñ–∞–π–ª –±—É–¥–µ—Ç: ${wavFilePath}`);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç
      console.log('üîÑ [Whisper] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç...');
      await convertToWav(originalFilePath, wavFilePath);
      
      console.log(`‚è≥ [Whisper] –û—Ç–ø—Ä–∞–≤–∫–∞ WAV —Ñ–∞–π–ª–∞ –≤ OpenAI Whisper API...`);

      const transcription = await openai.audio.transcriptions.create({
        file: fs.createReadStream(wavFilePath),
        model: 'whisper-1',
        language: 'ru',
      });

      console.log('‚úÖ [Whisper] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:', transcription.text);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      fs.unlink(originalFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª:', unlinkErr);
        }
      });
      
      fs.unlink(wavFilePath, (unlinkErr) => {
        if (unlinkErr) {
          console.error('‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WAV —Ñ–∞–π–ª:', unlinkErr);
        }
      });

      res.status(200).json({ transcript: transcription.text });
    } catch (error: any) {
      console.error('‚ùå [Whisper] –û—à–∏–±–∫–∞:', error.response ? error.response.data : error.message);
      
      // –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      fs.unlink(originalFilePath, (unlinkErr) => {
        if (unlinkErr) console.error('‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', unlinkErr);
      });
      
      fs.unlink(wavFilePath, (unlinkErr) => {
        if (unlinkErr) console.error('‚ö†Ô∏è [Whisper] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å WAV —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', unlinkErr);
      });
      
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏.', details: error.message });
    }
  });
}; 