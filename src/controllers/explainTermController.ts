import { Request, Response } from 'express';
import { termAnalysisAgent } from '../services/termAnalysisAgent.js';

/**
 * üîç –ö–û–ù–¢–†–û–õ–õ–ï–† –î–õ–Ø –ü–†–Ø–ú–û–ì–û –û–ë–™–Ø–°–ù–ï–ù–ò–Ø –¢–ï–†–ú–ò–ù–û–í
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∏–¥–∞:
 * - "–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤?"
 * - "–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ä–º–∏–Ω CE-–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞"
 * - "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç WCAG?"
 */
export const explainTermController = async (req: Request, res: Response): Promise<void> => {
  console.log('\nüîç [EXPLAIN_TERM] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (req.method !== 'POST') {
      res.status(405).json({ error: 'Method Not Allowed. Use POST instead.' });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { 
      term, 
      context = '', 
      session_id = null, 
      user_id = 'anonymous' 
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!term || typeof term !== 'string' || term.trim().length === 0) {
      res.status(400).json({ 
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä "term" –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.' 
      });
      return;
    }

    const cleanTerm = term.trim();
    console.log(`üéØ [EXPLAIN_TERM] –û–±—ä—è—Å–Ω—è—é —Ç–µ—Ä–º–∏–Ω: "${cleanTerm}"`);
    console.log(`üë§ [EXPLAIN_TERM] User: ${user_id} | Session: ${session_id || 'new'}`);
    
    if (context) {
      console.log(`üìù [EXPLAIN_TERM] –ö–æ–Ω—Ç–µ–∫—Å—Ç: "${context.substring(0, 100)}..."`);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const startTime = performance.now();

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞ –æ—Ç –ò–ò-–∞–≥–µ–Ω—Ç–∞
    const explanation = await termAnalysisAgent.explainTerm(cleanTerm, context);
    
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);

    console.log(`‚úÖ [EXPLAIN_TERM] –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ ${responseTime}ms`);
    console.log(`üìÑ [EXPLAIN_TERM] –î–ª–∏–Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ${explanation.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response = {
      term: cleanTerm,
      explanation,
      context: context || null,
      performance: {
        response_time_ms: responseTime
      },
      session_id: session_id || 'no-session',
      user_id,
      timestamp: new Date().toISOString()
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.status(200).json(response);
    
  } catch (error) {
    console.error('‚ùå [EXPLAIN_TERM] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞:', error);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    const errorResponse = {
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ç–µ—Ä–º–∏–Ω–∞',
      details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined,
      term: req.body?.term || 'unknown',
      timestamp: new Date().toISOString()
    };
    
    res.status(500).json(errorResponse);
  }
}; 